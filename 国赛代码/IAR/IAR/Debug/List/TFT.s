///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM       05/Jun/2015  14:14:13
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\Users\love ben\Desktop\IAR_1_2\IAR\my ku\project\TFT.c
//    Command line =  
//        "C:\Users\love ben\Desktop\IAR_1_2\IAR\my ku\project\TFT.c" -lA
//        "C:\Users\love ben\Desktop\IAR_1_2\IAR\Debug\List\" -o "C:\Users\love
//        ben\Desktop\IAR_1_2\IAR\Debug\Obj\" --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
//        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
//        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
//        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\Users\love
//        ben\Desktop\IAR_1_2\IAR\" -I "C:\Users\love
//        ben\Desktop\IAR_1_2\IAR\my ku\" -I "C:\Users\love
//        ben\Desktop\IAR_1_2\IAR\my ku\src\" -I "C:\Users\love
//        ben\Desktop\IAR_1_2\IAR\my ku\project\" -On
//    List file    =  C:\Users\love  ben\Desktop\IAR_1_2\IAR\Debug\List\TFT.s
//
///////////////////////////////////////////////////////////////////////////////

        RTMODEL "__SystemLibrary", "DLib"
        AAPCS BASE,INTERWORK,VFP
        PRESERVE8
        REQUIRE8

        #define SHT_PROGBITS 0x1

        EXTERN GPIO_SET
        EXTERN Get_Transform_Value
        EXTERN RST0
        EXTERN RST1
        EXTERN SPI_Send
        EXTERN SYSDelay_ms
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_dmul
        EXTERN __aeabi_ui2d
        EXTERN threshold

        PUBLIC BACK_COLOR
        PUBLIC Draw_Circle
        PUBLIC LCD_DisplayOff
        PUBLIC LCD_DisplayOn
        PUBLIC LCD_DrawPoint
        PUBLIC LCD_Pow
        PUBLIC LCD_SetCursor
        PUBLIC LCD_ShowChar
        PUBLIC LCD_ShowNum
        PUBLIC LCD_ShowString
        PUBLIC LCD_ShowxNum
        PUBLIC LCD_WR_DATA
        PUBLIC LCD_WR_DATA8
        PUBLIC LCD_WR_REG
        PUBLIC LCD_WR_REG_DATA
        PUBLIC LCD_WriteRAM_Prepare
        PUBLIC POINT_COLOR
        PUBLIC TFT_Clear
        PUBLIC TFT_Color_Fill
        PUBLIC TFT_DrawLine
        PUBLIC TFT_DrawRectangle
        PUBLIC TFT_Fill
        PUBLIC TFT_Init
        PUBLIC asc2_1206
        PUBLIC asc2_1608
        PUBLIC clear_image
        PUBLIC hanzi16
        PUBLIC hanzi32
        PUBLIC lcddev
        PUBLIC opt_delay
        PUBLIC qqimage
        PUBLIC show_2image
        PUBLIC show_dot
        PUBLIC show_dot_change
        PUBLIC show_dot_change2
        PUBLIC show_image
        PUBLIC show_real_pic
        PUBLIC showhanzi16
        PUBLIC showhanzi32
        PUBLIC showimage
        
          CFI Names cfiNames0
          CFI StackFrame CFA R13 DATA
          CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
          CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
          CFI Resource D0:64, D1:64, D2:64, D3:64, D4:64, D5:64, D6:64, D7:64
          CFI Resource D8:64, D9:64, D10:64, D11:64, D12:64, D13:64, D14:64
          CFI Resource D15:64
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R14 SameValue
          CFI D0 Undefined
          CFI D1 Undefined
          CFI D2 Undefined
          CFI D3 Undefined
          CFI D4 Undefined
          CFI D5 Undefined
          CFI D6 Undefined
          CFI D7 Undefined
          CFI D8 SameValue
          CFI D9 SameValue
          CFI D10 SameValue
          CFI D11 SameValue
          CFI D12 SameValue
          CFI D13 SameValue
          CFI D14 SameValue
          CFI D15 SameValue
          CFI EndCommon cfiCommon0
        
// C:\Users\love  ben\Desktop\IAR_1_2\IAR\my ku\project\TFT.c
//    1 #include "all.h"
//    2 //LCDµÄ»­±ÊÑÕÉ«ºÍ±³¾°É«	   

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//    3 uint16 POINT_COLOR=0x0000;	//»­±ÊÑÕÉ«
POINT_COLOR:
        DS8 2

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//    4 uint16 BACK_COLOR=0xFFFF;  //±³¾°É« 
BACK_COLOR:
        DATA
        DC16 65535
//    5 #define TFT_SPI_NUM SPI0
//    6 //32*32ºº×Ö×ÖÄ£

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//    7 const unsigned char hanzi32[]={			  
hanzi32:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 48, 192, 1, 0, 224, 224, 1, 0
        DC8 192, 225, 0, 0, 192, 97, 0, 24, 128, 241, 255, 63, 0, 112, 0, 24, 0
        DC8 62, 0, 24, 4, 218, 1, 24, 28, 238, 1, 24, 56, 111, 96, 24, 120, 247
        DC8 255, 24, 112, 49, 134, 24, 176, 25, 6, 24, 128, 9, 6, 24, 128, 5
        DC8 134, 25, 192, 254, 255, 27, 192, 0, 6, 26, 192, 48, 102, 24, 224
        DC8 112, 230, 25, 124, 48, 230, 24, 112, 48, 230, 24, 96, 48, 230, 24
        DC8 112, 248, 255, 28, 112, 48, 224, 28, 112, 0, 0, 28, 112, 0, 240, 31
        DC8 112, 0, 128, 15, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 128, 0, 0, 14, 192, 1, 0, 254, 255, 3, 0, 14, 192, 1, 0, 14, 192
        DC8 1, 0, 14, 192, 1, 0, 254, 255, 1, 0, 14, 192, 1, 0, 14, 192, 1, 0
        DC8 14, 192, 1, 0, 254, 255, 1, 0, 14, 192, 1, 0, 6, 64, 0, 0, 0, 0, 0
        DC8 48, 112, 12, 24, 240, 255, 252, 63, 112, 112, 12, 24, 112, 112, 12
        DC8 24, 112, 112, 12, 24, 112, 112, 12, 24, 240, 127, 252, 31, 112, 112
        DC8 12, 24, 112, 112, 12, 24, 112, 112, 12, 24, 112, 112, 12, 24, 112
        DC8 112, 12, 24, 240, 127, 252, 31, 112, 112, 12, 24, 16, 0, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 112, 0, 0, 28, 112
        DC8 0, 252, 31, 112, 0, 0, 140, 113, 0, 32, 140, 119, 0, 224, 140, 115
        DC8 4, 240, 142, 115, 30, 112, 142, 243, 31, 112, 142, 251, 12, 112
        DC8 142, 127, 12, 112, 254, 115, 12, 48, 134, 115, 12, 48, 134, 115, 12
        DC8 48, 150, 115, 12, 248, 191, 115, 12, 56, 248, 115, 12, 0, 184, 115
        DC8 12, 0, 184, 243, 15, 0, 190, 115, 6, 224, 155, 115, 48, 126, 152
        DC8 115, 48, 28, 152, 19, 48, 8, 156, 3, 48, 0, 156, 3, 48, 0, 140, 3
        DC8 120, 224, 15, 255, 127, 128, 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0
//    8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x30,0xC0,0x01,0x00,0xE0,0xE0,0x01,0x00,0xC0,0xE1,0x00,0x00,0xC0,0x61,0x00,0x18,0x80,0xF1,0xFF,0x3F,0x00,0x70,0x00,0x18,0x00,0x3E,0x00,0x18,0x04,0xDA,0x01,0x18,0x1C,0xEE,0x01,0x18,0x38,0x6F,0x60,0x18,0x78,0xF7,0xFF,0x18,0x70,0x31,0x86,0x18,0xB0,0x19,0x06,0x18,0x80,0x09,0x06,0x18,0x80,0x05,0x86,0x19,0xC0,0xFE,0xFF,0x1B,0xC0,0x00,0x06,0x1A,0xC0,0x30,0x66,0x18,0xE0,0x70,0xE6,0x19,0x7C,0x30,0xE6,0x18,0x70,0x30,0xE6,0x18,0x60,0x30,0xE6,0x18,0x70,0xF8,0xFF,0x1C,0x70,0x30,0xE0,0x1C,0x70,0x00,0x00,0x1C,0x70,0x00,0xF0,0x1F,0x70,0x00,0x80,0x0F,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,//ÌÔ
//    9 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x0E,0xC0,0x01,0x00,0xFE,0xFF,0x03,0x00,0x0E,0xC0,0x01,0x00,0x0E,0xC0,0x01,0x00,0x0E,0xC0,0x01,0x00,0xFE,0xFF,0x01,0x00,0x0E,0xC0,0x01,0x00,0x0E,0xC0,0x01,0x00,0x0E,0xC0,0x01,0x00,0xFE,0xFF,0x01,0x00,0x0E,0xC0,0x01,0x00,0x06,0x40,0x00,0x00,0x00,0x00,0x00,0x30,0x70,0x0C,0x18,0xF0,0xFF,0xFC,0x3F,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0xF0,0x7F,0xFC,0x1F,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0x70,0x70,0x0C,0x18,0xF0,0x7F,0xFC,0x1F,0x70,0x70,0x0C,0x18,0x10,0x00,0x04,0x00,0x00,0x00,0x00,0x00,//¾§
//   10 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x70,0x00,0x00,0x1C,0x70,0x00,0xFC,0x1F,0x70,0x00,0x00,0x8C,0x71,0x00,0x20,0x8C,0x77,0x00,0xE0,0x8C,0x73,0x04,0xF0,0x8E,0x73,0x1E,0x70,0x8E,0xF3,0x1F,0x70,0x8E,0xFB,0x0C,0x70,0x8E,0x7F,0x0C,0x70,0xFE,0x73,0x0C,0x30,0x86,0x73,0x0C,0x30,0x86,0x73,0x0C,0x30,0x96,0x73,0x0C,0xF8,0xBF,0x73,0x0C,0x38,0xF8,0x73,0x0C,0x00,0xB8,0x73,0x0C,0x00,0xB8,0xF3,0x0F,0x00,0xBE,0x73,0x06,0xE0,0x9B,0x73,0x30,0x7E,0x98,0x73,0x30,0x1C,0x98,0x13,0x30,0x08,0x9C,0x03,0x30,0x00,0x9C,0x03,0x30,0x00,0x8C,0x03,0x78,0xE0,0x0F,0xFF,0x7F,0x80,0x07,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,//³Û
//   11 };
//   12 //16*16ºº×Ö×ÖÄ£

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   13 const unsigned char hanzi16[]={			  
hanzi16:
        DATA
        DC8 128, 0, 128, 0, 128, 0, 252, 31, 64, 0, 64, 0, 255, 127, 32, 0, 16
        DC8 0, 240, 15, 0, 8, 0, 4, 96, 2, 128, 1, 0, 2, 0, 4, 0, 1, 4, 2, 8, 0
        DC8 232, 63, 1, 2, 2, 2, 2, 2, 8, 2, 200, 63, 4, 2, 7, 2, 4, 2, 4, 2, 4
        DC8 2, 244, 127, 0, 0, 0, 0, 248, 15, 8, 8, 8, 8, 248, 15, 8, 8, 8, 8
        DC8 248, 15, 32, 2, 34, 34, 36, 34, 40, 18, 40, 10, 32, 2, 255, 127, 0
        DC8 0, 0, 0, 252, 31, 0, 0, 0, 0, 0, 0, 0, 0, 255, 127, 128, 0, 128, 0
        DC8 136, 8, 136, 16, 132, 32, 130, 64, 129, 64, 160, 0, 64, 0, 64, 0
        DC8 128, 0, 128, 0, 255, 127, 32, 0, 32, 0, 32, 0, 224, 15, 32, 8, 32
        DC8 8, 32, 8, 16, 8, 16, 8, 8, 8, 4, 5, 2, 2, 128, 0, 254, 63, 2, 32
        DC8 32, 0, 255, 127, 16, 4, 120, 2, 192, 3, 60, 28, 128, 0, 255, 127
        DC8 160, 2, 144, 4, 140, 24, 131, 96, 128, 0
//   14 0x80,0x00,0x80,0x00,0x80,0x00,0xFC,0x1F,0x40,0x00,0x40,0x00,0xFF,0x7F,0x20,0x00,0x10,0x00,0xF0,0x0F,0x00,0x08,0x00,0x04,0x60,0x02,0x80,0x01,0x00,0x02,0x00,0x04,//×¨
//   15 0x00,0x01,0x04,0x02,0x08,0x00,0xE8,0x3F,0x01,0x02,0x02,0x02,0x02,0x02,0x08,0x02,0xC8,0x3F,0x04,0x02,0x07,0x02,0x04,0x02,0x04,0x02,0x04,0x02,0xF4,0x7F,0x00,0x00,//×¢
//   16 0x00,0x00,0xF8,0x0F,0x08,0x08,0x08,0x08,0xF8,0x0F,0x08,0x08,0x08,0x08,0xF8,0x0F,0x20,0x02,0x22,0x22,0x24,0x22,0x28,0x12,0x28,0x0A,0x20,0x02,0xFF,0x7F,0x00,0x00,//ÏÔ
//   17 0x00,0x00,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x7F,0x80,0x00,0x80,0x00,0x88,0x08,0x88,0x10,0x84,0x20,0x82,0x40,0x81,0x40,0xA0,0x00,0x40,0x00,//Ê¾
//   18 0x40,0x00,0x80,0x00,0x80,0x00,0xFF,0x7F,0x20,0x00,0x20,0x00,0x20,0x00,0xE0,0x0F,0x20,0x08,0x20,0x08,0x20,0x08,0x10,0x08,0x10,0x08,0x08,0x08,0x04,0x05,0x02,0x02,//·½
//   19 0x80,0x00,0xFE,0x3F,0x02,0x20,0x20,0x00,0xFF,0x7F,0x10,0x04,0x78,0x02,0xC0,0x03,0x3C,0x1C,0x80,0x00,0xFF,0x7F,0xA0,0x02,0x90,0x04,0x8C,0x18,0x83,0x60,0x80,0x00,//°¸
//   20 };
//   21 //QQÍ¼Ïñ

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   22 const unsigned char qqimage[3200]={ /* 0X00,0X10,0X28,0X00,0X28,0X00,0X01,0X1B,*/
qqimage:
        DATA
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 190, 247, 125, 239, 186, 214, 182, 181, 243, 156, 178
        DC8 148, 179, 156, 178, 148, 52, 165, 247, 189, 251, 222, 125, 239, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 190
        DC8 247, 251, 222, 243, 156, 203, 90, 199, 57, 4, 33, 130, 16, 66, 16
        DC8 66, 16, 65, 8, 131, 24, 69, 41, 199, 57, 12, 99, 117, 173, 60, 231
        DC8 190, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 60, 231, 178, 148, 8, 66, 195
        DC8 24, 130, 16, 4, 33, 69, 41, 134, 49, 134, 49, 134, 49, 134, 49, 69
        DC8 41, 4, 33, 130, 16, 65, 8, 195, 24, 8, 66, 243, 156, 60, 231, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 251, 222, 12, 99, 195, 24, 195, 24, 69, 41, 199, 57, 8, 66, 8, 66
        DC8 8, 66, 8, 66, 8, 66, 8, 66, 199, 57, 199, 57, 134, 49, 134, 49, 4
        DC8 33, 65, 8, 130, 16, 203, 90, 186, 214, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 251, 222, 203, 90, 130, 16, 69, 41, 199, 57, 8
        DC8 66, 8, 66, 9, 74, 73, 74, 73, 74, 73, 74, 73, 74, 73, 74, 8, 66
        DC8 199, 57, 199, 57, 199, 57, 134, 49, 69, 41, 131, 24, 0, 0, 200, 65
        DC8 56, 198, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 125, 239, 142, 115, 130, 16, 69
        DC8 41, 199, 57, 8, 66, 9, 74, 138, 82, 48, 132, 207, 123, 138, 82, 73
        DC8 74, 74, 82, 73, 74, 203, 90, 207, 123, 12, 99, 8, 66, 199, 57, 134
        DC8 49, 69, 41, 195, 24, 0, 0, 73, 74, 186, 214, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 243, 156, 195, 24, 4, 33, 199, 57, 8, 66, 73, 74, 73, 74, 114, 148
        DC8 125, 239, 125, 239, 178, 148, 74, 82, 73, 74, 138, 82, 117, 173
        DC8 190, 247, 186, 214, 77, 107, 199, 57, 199, 57, 134, 49, 69, 41, 195
        DC8 24, 65, 8, 207, 123, 124, 231, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 186, 214, 8, 66, 130, 16, 199, 57, 8
        DC8 66, 73, 74, 73, 74, 142, 115, 251, 222, 255, 255, 190, 247, 186
        DC8 214, 142, 115, 8, 66, 48, 132, 60, 231, 125, 239, 255, 255, 182
        DC8 181, 73, 74, 199, 57, 134, 49, 69, 41, 4, 33, 65, 8, 69, 41, 182
        DC8 181, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 190
        DC8 247, 113, 140, 65, 8, 69, 41, 8, 66, 73, 74, 73, 74, 74, 82, 178
        DC8 148, 190, 247, 190, 247, 178, 148, 207, 123, 207, 123, 73, 74, 182
        DC8 181, 243, 156, 12, 99, 56, 198, 186, 214, 12, 99, 135, 57, 199, 57
        DC8 134, 49, 69, 41, 195, 24, 65, 8, 48, 132, 125, 239, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 60, 231, 203, 90, 65, 8, 199, 57, 8
        DC8 66, 73, 74, 74, 82, 138, 82, 243, 156, 255, 255, 125, 239, 199, 57
        DC8 195, 24, 12, 99, 203, 90, 182, 181, 178, 148, 203, 90, 117, 173
        DC8 250, 214, 77, 107, 135, 57, 199, 57, 134, 49, 69, 41, 4, 33, 65, 8
        DC8 138, 82, 121, 206, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 56, 198
        DC8 134, 49, 4, 33, 200, 65, 73, 74, 73, 74, 74, 82, 73, 74, 177, 140
        DC8 190, 247, 190, 247, 178, 148, 207, 123, 207, 123, 73, 74, 116, 165
        DC8 125, 239, 124, 231, 190, 247, 121, 206, 12, 99, 199, 57, 199, 57
        DC8 134, 49, 69, 41, 4, 33, 130, 16, 69, 41, 117, 173, 190, 247, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 52, 165, 130, 16, 134, 49, 8, 66, 73
        DC8 74, 73, 74, 138, 82, 73, 74, 77, 107, 186, 214, 255, 255, 255, 255
        DC8 121, 206, 13, 99, 199, 57, 207, 123, 125, 239, 255, 255, 255, 255
        DC8 117, 173, 8, 66, 134, 49, 199, 57, 134, 49, 69, 41, 69, 41, 195, 24
        DC8 195, 24, 178, 148, 125, 239, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 190, 247, 178
        DC8 140, 65, 8, 199, 57, 8, 66, 73, 74, 73, 74, 138, 82, 138, 82, 74
        DC8 74, 208, 123, 122, 198, 123, 190, 144, 107, 201, 57, 136, 49, 201
        DC8 57, 179, 132, 187, 198, 248, 181, 204, 90, 134, 49, 199, 57, 199
        DC8 57, 134, 49, 69, 41, 69, 41, 196, 32, 65, 8, 48, 132, 60, 231, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 60, 231, 138, 74, 195, 16, 199, 57, 8, 66, 73
        DC8 74, 73, 74, 74, 74, 74, 66, 9, 58, 8, 74, 9, 107, 73, 123, 198, 122
        DC8 5, 131, 70, 131, 197, 122, 198, 114, 9, 123, 72, 90, 135, 49, 136
        DC8 33, 136, 41, 134, 49, 134, 49, 69, 41, 69, 41, 4, 33, 65, 8, 74, 74
        DC8 186, 214, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 247, 197, 130, 80, 5, 65, 199
        DC8 41, 8, 66, 73, 74, 74, 66, 73, 74, 9, 123, 136, 155, 198, 179, 33
        DC8 212, 160, 220, 225, 228, 97, 237, 97, 237, 33, 237, 160, 228, 32
        DC8 220, 128, 203, 67, 171, 196, 130, 6, 90, 71, 33, 70, 41, 69, 41, 4
        DC8 41, 4, 25, 130, 16, 130, 24, 243, 156, 125, 239, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 125, 239, 77, 147
        DC8 0, 160, 130, 184, 199, 49, 9, 50, 73, 74, 134, 122, 67, 195, 107
        DC8 237, 244, 246, 235, 253, 32, 253, 32, 253, 96, 253, 160, 253, 160
        DC8 253, 96, 253, 96, 253, 32, 253, 224, 252, 160, 252, 96, 244, 193
        DC8 219, 131, 154, 197, 73, 69, 41, 4, 25, 196, 32, 130, 56, 0, 80, 203
        DC8 106, 186, 214, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 251, 238, 4, 161, 0, 192, 0, 240, 195, 160, 200
        DC8 65, 73, 66, 5, 155, 32, 252, 164, 252, 105, 253, 232, 253, 99, 253
        DC8 32, 253, 96, 253, 96, 253, 96, 253, 32, 253, 32, 253, 224, 252, 224
        DC8 252, 160, 252, 96, 252, 32, 252, 65, 211, 197, 73, 69, 25, 196, 56
        DC8 130, 104, 65, 136, 0, 112, 73, 90, 121, 206, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 246, 130
        DC8 192, 0, 208, 134, 193, 70, 241, 65, 200, 69, 121, 137, 82, 136, 98
        DC8 134, 106, 198, 122, 196, 187, 225, 252, 96, 253, 96, 253, 160, 253
        DC8 160, 253, 96, 253, 96, 253, 224, 252, 96, 228, 3, 147, 132, 114, 68
        DC8 106, 197, 65, 69, 41, 195, 88, 65, 168, 64, 152, 0, 176, 0, 96, 12
        DC8 107, 121, 206, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 125, 239, 206, 131, 130, 136, 0, 248, 196, 216, 12, 243
        DC8 138, 250, 130, 232, 130, 176, 69, 105, 199, 81, 8, 66, 8, 58, 134
        DC8 90, 131, 155, 162, 188, 34, 205, 33, 205, 161, 196, 34, 180, 196
        DC8 122, 6, 58, 134, 41, 69, 41, 5, 49, 196, 80, 65, 144, 0, 192, 0
        DC8 168, 0, 160, 0, 168, 0, 48, 74, 74, 186, 214, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 125, 239, 142, 115, 195, 24, 5, 57
        DC8 130, 168, 0, 248, 195, 248, 77, 251, 77, 251, 199, 249, 195, 240
        DC8 130, 216, 195, 176, 4, 129, 69, 97, 70, 81, 134, 73, 134, 73, 70
        DC8 65, 69, 65, 69, 65, 69, 65, 5, 73, 4, 97, 130, 144, 65, 176, 0, 208
        DC8 0, 200, 0, 168, 0, 168, 0, 184, 65, 88, 130, 16, 130, 16, 178, 148
        DC8 190, 247, 255, 255, 255, 255, 255, 255, 190, 247, 207, 123, 130, 16
        DC8 4, 33, 134, 41, 134, 65, 4, 153, 64, 232, 65, 248, 134, 249, 203
        DC8 250, 73, 250, 130, 248, 0, 248, 0, 240, 0, 232, 65, 216, 65, 208
        DC8 65, 192, 65, 192, 65, 192, 65, 192, 65, 200, 0, 208, 0, 224, 0, 224
        DC8 0, 216, 0, 208, 0, 184, 0, 168, 65, 136, 130, 72, 130, 16, 130, 16
        DC8 0, 0, 69, 41, 121, 206, 255, 255, 255, 255, 190, 247, 243, 156, 130
        DC8 16, 195, 24, 69, 41, 134, 49, 199, 49, 48, 124, 243, 220, 134, 225
        DC8 0, 240, 0, 248, 65, 248, 65, 248, 0, 248, 0, 248, 0, 248, 0, 248, 0
        DC8 248, 0, 248, 0, 248, 0, 248, 0, 248, 0, 248, 0, 232, 0, 224, 0, 224
        DC8 0, 216, 0, 200, 65, 160, 138, 154, 12, 99, 4, 17, 130, 16, 130, 16
        DC8 65, 8, 0, 0, 77, 107, 125, 239, 255, 255, 251, 222, 8, 66, 66, 16
        DC8 69, 41, 134, 49, 134, 49, 73, 74, 56, 190, 255, 255, 56, 214, 134
        DC8 169, 0, 200, 0, 224, 0, 240, 0, 248, 0, 248, 0, 248, 0, 248, 0, 248
        DC8 0, 248, 0, 248, 0, 248, 0, 240, 0, 240, 0, 232, 0, 224, 0, 208, 195
        DC8 152, 138, 138, 178, 164, 186, 198, 247, 181, 8, 66, 65, 8, 130, 16
        DC8 65, 8, 0, 0, 69, 41, 247, 189, 255, 255, 113, 140, 65, 8, 4, 33, 69
        DC8 41, 134, 49, 134, 49, 12, 99, 60, 231, 255, 255, 121, 214, 70, 185
        DC8 0, 224, 66, 200, 130, 168, 130, 176, 65, 216, 130, 232, 130, 240
        DC8 65, 232, 65, 232, 65, 232, 65, 240, 65, 232, 65, 216, 4, 193, 8
        DC8 146, 77, 139, 52, 165, 251, 198, 251, 214, 186, 206, 60, 231, 48
        DC8 132, 195, 24, 65, 8, 65, 8, 0, 0, 65, 8, 207, 123, 125, 239, 73, 74
        DC8 0, 0, 4, 33, 69, 41, 70, 49, 134, 49, 48, 132, 255, 255, 255, 247
        DC8 247, 221, 9, 218, 131, 248, 1, 240, 66, 192, 130, 152, 73, 154, 243
        DC8 180, 243, 204, 113, 188, 142, 187, 142, 187, 48, 188, 113, 188, 243
        DC8 188, 182, 189, 251, 206, 190, 231, 125, 231, 59, 223, 186, 214, 121
        DC8 206, 251, 222, 117, 173, 134, 49, 65, 8, 65, 8, 0, 0, 0, 0, 73, 74
        DC8 251, 222, 4, 33, 65, 8, 4, 33, 69, 41, 69, 41, 135, 57, 178, 148
        DC8 255, 255, 190, 247, 52, 221, 12, 235, 9, 250, 0, 240, 1, 216, 0
        DC8 216, 139, 210, 125, 231, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 190, 255, 125, 239, 251
        DC8 222, 251, 222, 186, 214, 121, 206, 186, 214, 120, 198, 199, 57, 0
        DC8 0, 65, 8, 0, 0, 0, 0, 199, 57, 121, 206, 0, 0, 130, 16, 195, 24, 4
        DC8 33, 5, 41, 134, 49, 179, 156, 255, 255, 255, 247, 117, 221, 199
        DC8 233, 199, 249, 1, 248, 1, 240, 0, 232, 73, 226, 251, 238, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 190, 247, 125, 239, 251, 222, 251, 222, 186, 214, 121, 206
        DC8 186, 214, 185, 206, 8, 66, 0, 0, 0, 0, 0, 0, 0, 0, 199, 57, 56, 198
        DC8 0, 0, 130, 16, 130, 16, 4, 33, 4, 33, 69, 41, 48, 132, 255, 255
        DC8 255, 255, 56, 222, 196, 208, 0, 240, 1, 248, 0, 248, 0, 240, 8, 210
        DC8 251, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 190, 247, 125, 239, 251, 222, 186, 214
        DC8 121, 206, 121, 206, 186, 214, 121, 206, 199, 57, 65, 8, 0, 0, 0, 0
        DC8 0, 0, 134, 49, 56, 198, 0, 0, 0, 0, 195, 24, 203, 90, 134, 49, 195
        DC8 24, 203, 90, 125, 239, 255, 255, 125, 239, 207, 187, 195, 176, 65
        DC8 208, 65, 208, 130, 184, 77, 179, 125, 231, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 190, 247, 190, 247, 61
        DC8 239, 251, 222, 186, 214, 121, 206, 121, 206, 250, 214, 247, 189, 4
        DC8 33, 134, 49, 4, 33, 0, 0, 0, 0, 134, 49, 56, 198, 134, 49, 195, 24
        DC8 203, 90, 117, 173, 207, 123, 65, 8, 134, 49, 247, 189, 255, 255
        DC8 255, 255, 190, 239, 116, 181, 48, 156, 48, 156, 114, 164, 187, 214
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 190, 247, 125, 239, 60, 231, 251, 222, 186, 214, 121
        DC8 206, 121, 206, 60, 231, 113, 140, 129, 8, 12, 99, 207, 123, 130, 16
        DC8 0, 0, 138, 82, 56, 198, 117, 173, 113, 140, 182, 181, 60, 231, 251
        DC8 222, 199, 57, 0, 0, 207, 115, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 190, 247, 125
        DC8 239, 125, 239, 59, 223, 250, 214, 121, 206, 121, 206, 251, 222, 185
        DC8 206, 199, 57, 196, 32, 113, 140, 186, 214, 113, 140, 203, 90, 178
        DC8 148, 186, 214, 255, 255, 125, 239, 125, 239, 255, 255, 255, 255
        DC8 182, 181, 70, 41, 5, 25, 117, 165, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 190, 247, 125, 239, 60
        DC8 231, 251, 222, 186, 214, 121, 206, 186, 214, 252, 222, 78, 99, 66
        DC8 8, 12, 99, 247, 189, 190, 247, 255, 255, 251, 222, 251, 222, 190
        DC8 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 244, 156, 4, 33, 5, 33, 182, 165, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 190, 247, 190, 247, 125, 239, 60, 231, 251, 222, 186, 214
        DC8 121, 206, 251, 222, 187, 214, 209, 115, 131, 24, 134, 57, 52, 157
        DC8 189, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 190, 255, 53, 214, 235, 204, 67
        DC8 179, 64, 81, 5, 25, 245, 140, 190, 239, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 190, 247, 190, 247
        DC8 125, 239, 125, 239, 60, 231, 251, 222, 186, 222, 186, 214, 60, 223
        DC8 58, 190, 79, 99, 130, 73, 64, 163, 35, 180, 204, 131, 58, 190, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 191, 247, 181, 189, 130, 146, 32, 244, 160, 252, 96, 228
        DC8 64, 130, 132, 65, 143, 107, 119, 173, 61, 231, 255, 255, 255, 255
        DC8 254, 255, 190, 247, 190, 247, 190, 247, 125, 239, 125, 239, 60, 231
        DC8 251, 222, 251, 222, 61, 231, 187, 206, 54, 157, 11, 107, 65, 106
        DC8 96, 196, 32, 254, 96, 245, 0, 139, 199, 106, 56, 198, 190, 247, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 125, 239, 75
        DC8 123, 128, 178, 160, 252, 160, 252, 224, 252, 224, 252, 192, 203
        DC8 193, 138, 69, 98, 77, 107, 179, 148, 247, 189, 61, 223, 255, 247
        DC8 255, 255, 190, 247, 125, 239, 125, 239, 125, 231, 61, 223, 186, 198
        DC8 117, 165, 141, 123, 132, 122, 64, 179, 224, 236, 224, 253, 224, 253
        DC8 96, 245, 32, 229, 160, 212, 10, 107, 251, 222, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 125, 239, 204, 147, 64, 235
        DC8 96, 252, 160, 252, 224, 252, 32, 253, 96, 253, 32, 245, 160, 212
        DC8 192, 187, 66, 155, 69, 139, 107, 156, 174, 156, 113, 140, 179, 148
        DC8 51, 157, 52, 165, 242, 164, 240, 180, 202, 155, 4, 155, 64, 187, 32
        DC8 228, 32, 253, 160, 253, 160, 253, 224, 253, 224, 253, 224, 253, 32
        DC8 196, 136, 90, 56, 190, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 120, 214, 70, 171, 64, 219, 32, 244, 96
        DC8 252, 160, 252, 224, 252, 96, 253, 160, 253, 96, 253, 32, 245, 160
        DC8 220, 192, 179, 192, 81, 134, 41, 13, 99, 143, 123, 13, 91, 199, 65
        DC8 1, 130, 0, 195, 192, 227, 96, 252, 160, 252, 224, 252, 224, 252, 96
        DC8 245, 96, 245, 32, 229, 128, 155, 134, 98, 48, 132, 121, 206, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 56, 198, 45, 156, 5, 147, 67, 163, 130, 179, 194, 187
        DC8 194, 187, 34, 180, 130, 163, 66, 147, 195, 122, 133, 98, 11, 99
        DC8 113, 132, 182, 181, 121, 206, 121, 198, 181, 173, 112, 148, 74, 139
        DC8 6, 131, 4, 147, 4, 155, 67, 155, 67, 155, 67, 147, 4, 131, 8, 115
        DC8 141, 115, 179, 148, 121, 206, 125, 239, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 60
        DC8 223, 56, 190, 117, 181, 51, 165, 51, 165, 243, 156, 243, 156, 243
        DC8 156, 243, 148, 243, 156, 53, 165, 248, 189, 251, 222, 190, 247, 255
        DC8 255, 255, 255, 255, 255, 126, 239, 187, 214, 248, 189, 182, 173
        DC8 117, 173, 52, 165, 51, 157, 52, 157, 53, 165, 183, 173, 121, 198
        DC8 60, 231, 190, 247, 255, 255, 255, 255, 255, 255, 255, 255
//   23 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   24 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0X7D,0XEF,
//   25 0XBA,0XD6,0XB6,0XB5,0XF3,0X9C,0XB2,0X94,0XB3,0X9C,0XB2,0X94,0X34,0XA5,0XF7,0XBD,
//   26 0XFB,0XDE,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   27 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   28 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   29 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0XFB,0XDE,0XF3,0X9C,0XCB,0X5A,
//   30 0XC7,0X39,0X04,0X21,0X82,0X10,0X42,0X10,0X42,0X10,0X41,0X08,0X83,0X18,0X45,0X29,
//   31 0XC7,0X39,0X0C,0X63,0X75,0XAD,0X3C,0XE7,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   32 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   33 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   34 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3C,0XE7,0XB2,0X94,0X08,0X42,0XC3,0X18,0X82,0X10,
//   35 0X04,0X21,0X45,0X29,0X86,0X31,0X86,0X31,0X86,0X31,0X86,0X31,0X45,0X29,0X04,0X21,
//   36 0X82,0X10,0X41,0X08,0XC3,0X18,0X08,0X42,0XF3,0X9C,0X3C,0XE7,0XFF,0XFF,0XFF,0XFF,
//   37 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   38 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   39 0XFF,0XFF,0XFF,0XFF,0XFB,0XDE,0X0C,0X63,0XC3,0X18,0XC3,0X18,0X45,0X29,0XC7,0X39,
//   40 0X08,0X42,0X08,0X42,0X08,0X42,0X08,0X42,0X08,0X42,0X08,0X42,0XC7,0X39,0XC7,0X39,
//   41 0X86,0X31,0X86,0X31,0X04,0X21,0X41,0X08,0X82,0X10,0XCB,0X5A,0XBA,0XD6,0XFF,0XFF,
//   42 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   43 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   44 0XFF,0XFF,0XFB,0XDE,0XCB,0X5A,0X82,0X10,0X45,0X29,0XC7,0X39,0X08,0X42,0X08,0X42,
//   45 0X09,0X4A,0X49,0X4A,0X49,0X4A,0X49,0X4A,0X49,0X4A,0X49,0X4A,0X08,0X42,0XC7,0X39,
//   46 0XC7,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0X83,0X18,0X00,0X00,0XC8,0X41,0X38,0XC6,
//   47 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   48 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   49 0X7D,0XEF,0X8E,0X73,0X82,0X10,0X45,0X29,0XC7,0X39,0X08,0X42,0X09,0X4A,0X8A,0X52,
//   50 0X30,0X84,0XCF,0X7B,0X8A,0X52,0X49,0X4A,0X4A,0X52,0X49,0X4A,0XCB,0X5A,0XCF,0X7B,
//   51 0X0C,0X63,0X08,0X42,0XC7,0X39,0X86,0X31,0X45,0X29,0XC3,0X18,0X00,0X00,0X49,0X4A,
//   52 0XBA,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   53 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   54 0XF3,0X9C,0XC3,0X18,0X04,0X21,0XC7,0X39,0X08,0X42,0X49,0X4A,0X49,0X4A,0X72,0X94,
//   55 0X7D,0XEF,0X7D,0XEF,0XB2,0X94,0X4A,0X52,0X49,0X4A,0X8A,0X52,0X75,0XAD,0XBE,0XF7,
//   56 0XBA,0XD6,0X4D,0X6B,0XC7,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0XC3,0X18,0X41,0X08,
//   57 0XCF,0X7B,0X7C,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   58 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBA,0XD6,
//   59 0X08,0X42,0X82,0X10,0XC7,0X39,0X08,0X42,0X49,0X4A,0X49,0X4A,0X8E,0X73,0XFB,0XDE,
//   60 0XFF,0XFF,0XBE,0XF7,0XBA,0XD6,0X8E,0X73,0X08,0X42,0X30,0X84,0X3C,0XE7,0X7D,0XEF,
//   61 0XFF,0XFF,0XB6,0XB5,0X49,0X4A,0XC7,0X39,0X86,0X31,0X45,0X29,0X04,0X21,0X41,0X08,
//   62 0X45,0X29,0XB6,0XB5,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   63 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0X71,0X8C,
//   64 0X41,0X08,0X45,0X29,0X08,0X42,0X49,0X4A,0X49,0X4A,0X4A,0X52,0XB2,0X94,0XBE,0XF7,
//   65 0XBE,0XF7,0XB2,0X94,0XCF,0X7B,0XCF,0X7B,0X49,0X4A,0XB6,0XB5,0XF3,0X9C,0X0C,0X63,
//   66 0X38,0XC6,0XBA,0XD6,0X0C,0X63,0X87,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0XC3,0X18,
//   67 0X41,0X08,0X30,0X84,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   68 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3C,0XE7,0XCB,0X5A,
//   69 0X41,0X08,0XC7,0X39,0X08,0X42,0X49,0X4A,0X4A,0X52,0X8A,0X52,0XF3,0X9C,0XFF,0XFF,
//   70 0X7D,0XEF,0XC7,0X39,0XC3,0X18,0X0C,0X63,0XCB,0X5A,0XB6,0XB5,0XB2,0X94,0XCB,0X5A,
//   71 0X75,0XAD,0XFA,0XD6,0X4D,0X6B,0X87,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0X04,0X21,
//   72 0X41,0X08,0X8A,0X52,0X79,0XCE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   73 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X38,0XC6,0X86,0X31,
//   74 0X04,0X21,0XC8,0X41,0X49,0X4A,0X49,0X4A,0X4A,0X52,0X49,0X4A,0XB1,0X8C,0XBE,0XF7,
//   75 0XBE,0XF7,0XB2,0X94,0XCF,0X7B,0XCF,0X7B,0X49,0X4A,0X74,0XA5,0X7D,0XEF,0X7C,0XE7,
//   76 0XBE,0XF7,0X79,0XCE,0X0C,0X63,0XC7,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0X04,0X21,
//   77 0X82,0X10,0X45,0X29,0X75,0XAD,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   78 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X34,0XA5,0X82,0X10,
//   79 0X86,0X31,0X08,0X42,0X49,0X4A,0X49,0X4A,0X8A,0X52,0X49,0X4A,0X4D,0X6B,0XBA,0XD6,
//   80 0XFF,0XFF,0XFF,0XFF,0X79,0XCE,0X0D,0X63,0XC7,0X39,0XCF,0X7B,0X7D,0XEF,0XFF,0XFF,
//   81 0XFF,0XFF,0X75,0XAD,0X08,0X42,0X86,0X31,0XC7,0X39,0X86,0X31,0X45,0X29,0X45,0X29,
//   82 0XC3,0X18,0XC3,0X18,0XB2,0X94,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   83 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0XB2,0X8C,0X41,0X08,
//   84 0XC7,0X39,0X08,0X42,0X49,0X4A,0X49,0X4A,0X8A,0X52,0X8A,0X52,0X4A,0X4A,0XD0,0X7B,
//   85 0X7A,0XC6,0X7B,0XBE,0X90,0X6B,0XC9,0X39,0X88,0X31,0XC9,0X39,0XB3,0X84,0XBB,0XC6,
//   86 0XF8,0XB5,0XCC,0X5A,0X86,0X31,0XC7,0X39,0XC7,0X39,0X86,0X31,0X45,0X29,0X45,0X29,
//   87 0XC4,0X20,0X41,0X08,0X30,0X84,0X3C,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   88 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3C,0XE7,0X8A,0X4A,0XC3,0X10,
//   89 0XC7,0X39,0X08,0X42,0X49,0X4A,0X49,0X4A,0X4A,0X4A,0X4A,0X42,0X09,0X3A,0X08,0X4A,
//   90 0X09,0X6B,0X49,0X7B,0XC6,0X7A,0X05,0X83,0X46,0X83,0XC5,0X7A,0XC6,0X72,0X09,0X7B,
//   91 0X48,0X5A,0X87,0X31,0X88,0X21,0X88,0X29,0X86,0X31,0X86,0X31,0X45,0X29,0X45,0X29,
//   92 0X04,0X21,0X41,0X08,0X4A,0X4A,0XBA,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   93 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XC5,0X82,0X50,0X05,0X41,
//   94 0XC7,0X29,0X08,0X42,0X49,0X4A,0X4A,0X42,0X49,0X4A,0X09,0X7B,0X88,0X9B,0XC6,0XB3,
//   95 0X21,0XD4,0XA0,0XDC,0XE1,0XE4,0X61,0XED,0X61,0XED,0X21,0XED,0XA0,0XE4,0X20,0XDC,
//   96 0X80,0XCB,0X43,0XAB,0XC4,0X82,0X06,0X5A,0X47,0X21,0X46,0X29,0X45,0X29,0X04,0X29,
//   97 0X04,0X19,0X82,0X10,0X82,0X18,0XF3,0X9C,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//   98 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XEF,0X4D,0X93,0X00,0XA0,0X82,0XB8,
//   99 0XC7,0X31,0X09,0X32,0X49,0X4A,0X86,0X7A,0X43,0XC3,0X6B,0XED,0XF4,0XF6,0XEB,0XFD,
//  100 0X20,0XFD,0X20,0XFD,0X60,0XFD,0XA0,0XFD,0XA0,0XFD,0X60,0XFD,0X60,0XFD,0X20,0XFD,
//  101 0XE0,0XFC,0XA0,0XFC,0X60,0XF4,0XC1,0XDB,0X83,0X9A,0XC5,0X49,0X45,0X29,0X04,0X19,
//  102 0XC4,0X20,0X82,0X38,0X00,0X50,0XCB,0X6A,0XBA,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  103 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XEE,0X04,0XA1,0X00,0XC0,0X00,0XF0,
//  104 0XC3,0XA0,0XC8,0X41,0X49,0X42,0X05,0X9B,0X20,0XFC,0XA4,0XFC,0X69,0XFD,0XE8,0XFD,
//  105 0X63,0XFD,0X20,0XFD,0X60,0XFD,0X60,0XFD,0X60,0XFD,0X20,0XFD,0X20,0XFD,0XE0,0XFC,
//  106 0XE0,0XFC,0XA0,0XFC,0X60,0XFC,0X20,0XFC,0X41,0XD3,0XC5,0X49,0X45,0X19,0XC4,0X38,
//  107 0X82,0X68,0X41,0X88,0X00,0X70,0X49,0X5A,0X79,0XCE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  108 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XF6,0X82,0XC0,0X00,0XD0,0X86,0XC1,
//  109 0X46,0XF1,0X41,0XC8,0X45,0X79,0X89,0X52,0X88,0X62,0X86,0X6A,0XC6,0X7A,0XC4,0XBB,
//  110 0XE1,0XFC,0X60,0XFD,0X60,0XFD,0XA0,0XFD,0XA0,0XFD,0X60,0XFD,0X60,0XFD,0XE0,0XFC,
//  111 0X60,0XE4,0X03,0X93,0X84,0X72,0X44,0X6A,0XC5,0X41,0X45,0X29,0XC3,0X58,0X41,0XA8,
//  112 0X40,0X98,0X00,0XB0,0X00,0X60,0X0C,0X6B,0X79,0XCE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  113 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XEF,0XCE,0X83,0X82,0X88,0X00,0XF8,0XC4,0XD8,
//  114 0X0C,0XF3,0X8A,0XFA,0X82,0XE8,0X82,0XB0,0X45,0X69,0XC7,0X51,0X08,0X42,0X08,0X3A,
//  115 0X86,0X5A,0X83,0X9B,0XA2,0XBC,0X22,0XCD,0X21,0XCD,0XA1,0XC4,0X22,0XB4,0XC4,0X7A,
//  116 0X06,0X3A,0X86,0X29,0X45,0X29,0X05,0X31,0XC4,0X50,0X41,0X90,0X00,0XC0,0X00,0XA8,
//  117 0X00,0XA0,0X00,0XA8,0X00,0X30,0X4A,0X4A,0XBA,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  118 0XFF,0XFF,0XFF,0XFF,0X7D,0XEF,0X8E,0X73,0XC3,0X18,0X05,0X39,0X82,0XA8,0X00,0XF8,
//  119 0XC3,0XF8,0X4D,0XFB,0X4D,0XFB,0XC7,0XF9,0XC3,0XF0,0X82,0XD8,0XC3,0XB0,0X04,0X81,
//  120 0X45,0X61,0X46,0X51,0X86,0X49,0X86,0X49,0X46,0X41,0X45,0X41,0X45,0X41,0X45,0X41,
//  121 0X05,0X49,0X04,0X61,0X82,0X90,0X41,0XB0,0X00,0XD0,0X00,0XC8,0X00,0XA8,0X00,0XA8,
//  122 0X00,0XB8,0X41,0X58,0X82,0X10,0X82,0X10,0XB2,0X94,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,
//  123 0XFF,0XFF,0XBE,0XF7,0XCF,0X7B,0X82,0X10,0X04,0X21,0X86,0X29,0X86,0X41,0X04,0X99,
//  124 0X40,0XE8,0X41,0XF8,0X86,0XF9,0XCB,0XFA,0X49,0XFA,0X82,0XF8,0X00,0XF8,0X00,0XF0,
//  125 0X00,0XE8,0X41,0XD8,0X41,0XD0,0X41,0XC0,0X41,0XC0,0X41,0XC0,0X41,0XC0,0X41,0XC8,
//  126 0X00,0XD0,0X00,0XE0,0X00,0XE0,0X00,0XD8,0X00,0XD0,0X00,0XB8,0X00,0XA8,0X41,0X88,
//  127 0X82,0X48,0X82,0X10,0X82,0X10,0X00,0X00,0X45,0X29,0X79,0XCE,0XFF,0XFF,0XFF,0XFF,
//  128 0XBE,0XF7,0XF3,0X9C,0X82,0X10,0XC3,0X18,0X45,0X29,0X86,0X31,0XC7,0X31,0X30,0X7C,
//  129 0XF3,0XDC,0X86,0XE1,0X00,0XF0,0X00,0XF8,0X41,0XF8,0X41,0XF8,0X00,0XF8,0X00,0XF8,
//  130 0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,
//  131 0X00,0XE8,0X00,0XE0,0X00,0XE0,0X00,0XD8,0X00,0XC8,0X41,0XA0,0X8A,0X9A,0X0C,0X63,
//  132 0X04,0X11,0X82,0X10,0X82,0X10,0X41,0X08,0X00,0X00,0X4D,0X6B,0X7D,0XEF,0XFF,0XFF,
//  133 0XFB,0XDE,0X08,0X42,0X42,0X10,0X45,0X29,0X86,0X31,0X86,0X31,0X49,0X4A,0X38,0XBE,
//  134 0XFF,0XFF,0X38,0XD6,0X86,0XA9,0X00,0XC8,0X00,0XE0,0X00,0XF0,0X00,0XF8,0X00,0XF8,
//  135 0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF8,0X00,0XF0,0X00,0XF0,
//  136 0X00,0XE8,0X00,0XE0,0X00,0XD0,0XC3,0X98,0X8A,0X8A,0XB2,0XA4,0XBA,0XC6,0XF7,0XB5,
//  137 0X08,0X42,0X41,0X08,0X82,0X10,0X41,0X08,0X00,0X00,0X45,0X29,0XF7,0XBD,0XFF,0XFF,
//  138 0X71,0X8C,0X41,0X08,0X04,0X21,0X45,0X29,0X86,0X31,0X86,0X31,0X0C,0X63,0X3C,0XE7,
//  139 0XFF,0XFF,0X79,0XD6,0X46,0XB9,0X00,0XE0,0X42,0XC8,0X82,0XA8,0X82,0XB0,0X41,0XD8,
//  140 0X82,0XE8,0X82,0XF0,0X41,0XE8,0X41,0XE8,0X41,0XE8,0X41,0XF0,0X41,0XE8,0X41,0XD8,
//  141 0X04,0XC1,0X08,0X92,0X4D,0X8B,0X34,0XA5,0XFB,0XC6,0XFB,0XD6,0XBA,0XCE,0X3C,0XE7,
//  142 0X30,0X84,0XC3,0X18,0X41,0X08,0X41,0X08,0X00,0X00,0X41,0X08,0XCF,0X7B,0X7D,0XEF,
//  143 0X49,0X4A,0X00,0X00,0X04,0X21,0X45,0X29,0X46,0X31,0X86,0X31,0X30,0X84,0XFF,0XFF,
//  144 0XFF,0XF7,0XF7,0XDD,0X09,0XDA,0X83,0XF8,0X01,0XF0,0X42,0XC0,0X82,0X98,0X49,0X9A,
//  145 0XF3,0XB4,0XF3,0XCC,0X71,0XBC,0X8E,0XBB,0X8E,0XBB,0X30,0XBC,0X71,0XBC,0XF3,0XBC,
//  146 0XB6,0XBD,0XFB,0XCE,0XBE,0XE7,0X7D,0XE7,0X3B,0XDF,0XBA,0XD6,0X79,0XCE,0XFB,0XDE,
//  147 0X75,0XAD,0X86,0X31,0X41,0X08,0X41,0X08,0X00,0X00,0X00,0X00,0X49,0X4A,0XFB,0XDE,
//  148 0X04,0X21,0X41,0X08,0X04,0X21,0X45,0X29,0X45,0X29,0X87,0X39,0XB2,0X94,0XFF,0XFF,
//  149 0XBE,0XF7,0X34,0XDD,0X0C,0XEB,0X09,0XFA,0X00,0XF0,0X01,0XD8,0X00,0XD8,0X8B,0XD2,
//  150 0X7D,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  151 0XFF,0XFF,0XBE,0XFF,0X7D,0XEF,0XFB,0XDE,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0XBA,0XD6,
//  152 0X78,0XC6,0XC7,0X39,0X00,0X00,0X41,0X08,0X00,0X00,0X00,0X00,0XC7,0X39,0X79,0XCE,
//  153 0X00,0X00,0X82,0X10,0XC3,0X18,0X04,0X21,0X05,0X29,0X86,0X31,0XB3,0X9C,0XFF,0XFF,
//  154 0XFF,0XF7,0X75,0XDD,0XC7,0XE9,0XC7,0XF9,0X01,0XF8,0X01,0XF0,0X00,0XE8,0X49,0XE2,
//  155 0XFB,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  156 0XFF,0XFF,0XBE,0XF7,0X7D,0XEF,0XFB,0XDE,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0XBA,0XD6,
//  157 0XB9,0XCE,0X08,0X42,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC7,0X39,0X38,0XC6,
//  158 0X00,0X00,0X82,0X10,0X82,0X10,0X04,0X21,0X04,0X21,0X45,0X29,0X30,0X84,0XFF,0XFF,
//  159 0XFF,0XFF,0X38,0XDE,0XC4,0XD0,0X00,0XF0,0X01,0XF8,0X00,0XF8,0X00,0XF0,0X08,0XD2,
//  160 0XFB,0XE6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  161 0XFF,0XFF,0XBE,0XF7,0X7D,0XEF,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0X79,0XCE,0XBA,0XD6,
//  162 0X79,0XCE,0XC7,0X39,0X41,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X86,0X31,0X38,0XC6,
//  163 0X00,0X00,0X00,0X00,0XC3,0X18,0XCB,0X5A,0X86,0X31,0XC3,0X18,0XCB,0X5A,0X7D,0XEF,
//  164 0XFF,0XFF,0X7D,0XEF,0XCF,0XBB,0XC3,0XB0,0X41,0XD0,0X41,0XD0,0X82,0XB8,0X4D,0XB3,
//  165 0X7D,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  166 0XBE,0XF7,0XBE,0XF7,0X3D,0XEF,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0X79,0XCE,0XFA,0XD6,
//  167 0XF7,0XBD,0X04,0X21,0X86,0X31,0X04,0X21,0X00,0X00,0X00,0X00,0X86,0X31,0X38,0XC6,
//  168 0X86,0X31,0XC3,0X18,0XCB,0X5A,0X75,0XAD,0XCF,0X7B,0X41,0X08,0X86,0X31,0XF7,0XBD,
//  169 0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0X74,0XB5,0X30,0X9C,0X30,0X9C,0X72,0XA4,0XBB,0XD6,
//  170 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  171 0XBE,0XF7,0X7D,0XEF,0X3C,0XE7,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0X79,0XCE,0X3C,0XE7,
//  172 0X71,0X8C,0X81,0X08,0X0C,0X63,0XCF,0X7B,0X82,0X10,0X00,0X00,0X8A,0X52,0X38,0XC6,
//  173 0X75,0XAD,0X71,0X8C,0XB6,0XB5,0X3C,0XE7,0XFB,0XDE,0XC7,0X39,0X00,0X00,0XCF,0X73,
//  174 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  175 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,
//  176 0X7D,0XEF,0X7D,0XEF,0X3B,0XDF,0XFA,0XD6,0X79,0XCE,0X79,0XCE,0XFB,0XDE,0XB9,0XCE,
//  177 0XC7,0X39,0XC4,0X20,0X71,0X8C,0XBA,0XD6,0X71,0X8C,0XCB,0X5A,0XB2,0X94,0XBA,0XD6,
//  178 0XFF,0XFF,0X7D,0XEF,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XB6,0XB5,0X46,0X29,0X05,0X19,
//  179 0X75,0XA5,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  180 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,
//  181 0X7D,0XEF,0X3C,0XE7,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0XBA,0XD6,0XFC,0XDE,0X4E,0X63,
//  182 0X42,0X08,0X0C,0X63,0XF7,0XBD,0XBE,0XF7,0XFF,0XFF,0XFB,0XDE,0XFB,0XDE,0XBE,0XF7,
//  183 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF4,0X9C,0X04,0X21,
//  184 0X05,0X21,0XB6,0XA5,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  185 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0XBE,0XF7,0X7D,0XEF,
//  186 0X3C,0XE7,0XFB,0XDE,0XBA,0XD6,0X79,0XCE,0XFB,0XDE,0XBB,0XD6,0XD1,0X73,0X83,0X18,
//  187 0X86,0X39,0X34,0X9D,0XBD,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  188 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XFF,0X35,0XD6,0XEB,0XCC,0X43,0XB3,
//  189 0X40,0X51,0X05,0X19,0XF5,0X8C,0XBE,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  190 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0XBE,0XF7,0X7D,0XEF,0X7D,0XEF,0X3C,0XE7,
//  191 0XFB,0XDE,0XBA,0XDE,0XBA,0XD6,0X3C,0XDF,0X3A,0XBE,0X4F,0X63,0X82,0X49,0X40,0XA3,
//  192 0X23,0XB4,0XCC,0X83,0X3A,0XBE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  193 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XF7,0XB5,0XBD,0X82,0X92,0X20,0XF4,0XA0,0XFC,
//  194 0X60,0XE4,0X40,0X82,0X84,0X41,0X8F,0X6B,0X77,0XAD,0X3D,0XE7,0XFF,0XFF,0XFF,0XFF,
//  195 0XFE,0XFF,0XBE,0XF7,0XBE,0XF7,0XBE,0XF7,0X7D,0XEF,0X7D,0XEF,0X3C,0XE7,0XFB,0XDE,
//  196 0XFB,0XDE,0X3D,0XE7,0XBB,0XCE,0X36,0X9D,0X0B,0X6B,0X41,0X6A,0X60,0XC4,0X20,0XFE,
//  197 0X60,0XF5,0X00,0X8B,0XC7,0X6A,0X38,0XC6,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  198 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XEF,0X4B,0X7B,0X80,0XB2,0XA0,0XFC,0XA0,0XFC,
//  199 0XE0,0XFC,0XE0,0XFC,0XC0,0XCB,0XC1,0X8A,0X45,0X62,0X4D,0X6B,0XB3,0X94,0XF7,0XBD,
//  200 0X3D,0XDF,0XFF,0XF7,0XFF,0XFF,0XBE,0XF7,0X7D,0XEF,0X7D,0XEF,0X7D,0XE7,0X3D,0XDF,
//  201 0XBA,0XC6,0X75,0XA5,0X8D,0X7B,0X84,0X7A,0X40,0XB3,0XE0,0XEC,0XE0,0XFD,0XE0,0XFD,
//  202 0X60,0XF5,0X20,0XE5,0XA0,0XD4,0X0A,0X6B,0XFB,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  203 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XEF,0XCC,0X93,0X40,0XEB,0X60,0XFC,0XA0,0XFC,
//  204 0XE0,0XFC,0X20,0XFD,0X60,0XFD,0X20,0XF5,0XA0,0XD4,0XC0,0XBB,0X42,0X9B,0X45,0X8B,
//  205 0X6B,0X9C,0XAE,0X9C,0X71,0X8C,0XB3,0X94,0X33,0X9D,0X34,0XA5,0XF2,0XA4,0XF0,0XB4,
//  206 0XCA,0X9B,0X04,0X9B,0X40,0XBB,0X20,0XE4,0X20,0XFD,0XA0,0XFD,0XA0,0XFD,0XE0,0XFD,
//  207 0XE0,0XFD,0XE0,0XFD,0X20,0XC4,0X88,0X5A,0X38,0XBE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  208 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X78,0XD6,0X46,0XAB,0X40,0XDB,0X20,0XF4,
//  209 0X60,0XFC,0XA0,0XFC,0XE0,0XFC,0X60,0XFD,0XA0,0XFD,0X60,0XFD,0X20,0XF5,0XA0,0XDC,
//  210 0XC0,0XB3,0XC0,0X51,0X86,0X29,0X0D,0X63,0X8F,0X7B,0X0D,0X5B,0XC7,0X41,0X01,0X82,
//  211 0X00,0XC3,0XC0,0XE3,0X60,0XFC,0XA0,0XFC,0XE0,0XFC,0XE0,0XFC,0X60,0XF5,0X60,0XF5,
//  212 0X20,0XE5,0X80,0X9B,0X86,0X62,0X30,0X84,0X79,0XCE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  213 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X38,0XC6,0X2D,0X9C,0X05,0X93,
//  214 0X43,0XA3,0X82,0XB3,0XC2,0XBB,0XC2,0XBB,0X22,0XB4,0X82,0XA3,0X42,0X93,0XC3,0X7A,
//  215 0X85,0X62,0X0B,0X63,0X71,0X84,0XB6,0XB5,0X79,0XCE,0X79,0XC6,0XB5,0XAD,0X70,0X94,
//  216 0X4A,0X8B,0X06,0X83,0X04,0X93,0X04,0X9B,0X43,0X9B,0X43,0X9B,0X43,0X93,0X04,0X83,
//  217 0X08,0X73,0X8D,0X73,0XB3,0X94,0X79,0XCE,0X7D,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  218 0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3C,0XDF,0X38,0XBE,
//  219 0X75,0XB5,0X33,0XA5,0X33,0XA5,0XF3,0X9C,0XF3,0X9C,0XF3,0X9C,0XF3,0X94,0XF3,0X9C,
//  220 0X35,0XA5,0XF8,0XBD,0XFB,0XDE,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XEF,
//  221 0XBB,0XD6,0XF8,0XBD,0XB6,0XAD,0X75,0XAD,0X34,0XA5,0X33,0X9D,0X34,0X9D,0X35,0XA5,
//  222 0XB7,0XAD,0X79,0XC6,0X3C,0XE7,0XBE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
//  223 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  224 const unsigned char asc2_1206[95][12]={
asc2_1206:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 64, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 48, 0, 64, 0, 48, 0, 64, 0, 0, 0, 9, 0, 11, 192, 61, 0
        DC8 11, 192, 61, 0, 9, 0, 24, 192, 36, 64, 127, 224, 34, 64, 49, 128, 0
        DC8 0, 24, 0, 36, 192, 27, 0, 13, 128, 50, 64, 1, 128, 3, 128, 28, 64
        DC8 39, 64, 28, 128, 7, 64, 0, 64, 16, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 31, 128, 32, 64, 64, 32, 0, 0, 64, 32, 32, 64, 31
        DC8 128, 0, 0, 0, 0, 9, 0, 6, 0, 31, 128, 6, 0, 9, 0, 0, 0, 4, 0, 4, 0
        DC8 63, 128, 4, 0, 4, 0, 0, 0, 0, 16, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 4
        DC8 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 32, 1, 192, 6, 0, 56, 0, 64, 0, 0, 0, 31, 128, 32, 64, 32, 64
        DC8 32, 64, 31, 128, 0, 0, 0, 0, 16, 64, 63, 192, 0, 64, 0, 0, 0, 0, 24
        DC8 192, 33, 64, 34, 64, 36, 64, 24, 64, 0, 0, 16, 128, 32, 64, 36, 64
        DC8 36, 64, 27, 128, 0, 0, 2, 0, 13, 0, 17, 0, 63, 192, 1, 64, 0, 0, 60
        DC8 128, 36, 64, 36, 64, 36, 64, 35, 128, 0, 0, 31, 128, 36, 64, 36, 64
        DC8 52, 64, 3, 128, 0, 0, 48, 0, 32, 0, 39, 192, 56, 0, 32, 0, 0, 0, 27
        DC8 128, 36, 64, 36, 64, 36, 64, 27, 128, 0, 0, 28, 0, 34, 192, 34, 64
        DC8 34, 64, 31, 128, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 4, 96, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 0, 17, 0, 32, 128, 64
        DC8 64, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 0, 0, 0, 0, 64, 64, 32, 128, 17
        DC8 0, 10, 0, 4, 0, 24, 0, 32, 0, 35, 64, 36, 0, 24, 0, 0, 0, 31, 128
        DC8 32, 64, 39, 64, 41, 64, 31, 64, 0, 0, 0, 64, 7, 192, 57, 0, 15, 0
        DC8 1, 192, 0, 64, 32, 64, 63, 192, 36, 64, 36, 64, 27, 128, 0, 0, 31
        DC8 128, 32, 64, 32, 64, 32, 64, 48, 128, 0, 0, 32, 64, 63, 192, 32, 64
        DC8 32, 64, 31, 128, 0, 0, 32, 64, 63, 192, 36, 64, 46, 64, 48, 192, 0
        DC8 0, 32, 64, 63, 192, 36, 64, 46, 0, 48, 0, 0, 0, 15, 0, 16, 128, 32
        DC8 64, 34, 64, 51, 128, 2, 0, 32, 64, 63, 192, 4, 0, 4, 0, 63, 192, 32
        DC8 64, 32, 64, 32, 64, 63, 192, 32, 64, 32, 64, 0, 0, 0, 96, 32, 32
        DC8 32, 32, 63, 192, 32, 0, 32, 0, 32, 64, 63, 192, 36, 64, 11, 0, 48
        DC8 192, 32, 64, 32, 64, 63, 192, 32, 64, 0, 64, 0, 64, 0, 192, 63, 192
        DC8 60, 0, 3, 192, 60, 0, 63, 192, 0, 0, 32, 64, 63, 192, 12, 64, 35, 0
        DC8 63, 192, 32, 0, 31, 128, 32, 64, 32, 64, 32, 64, 31, 128, 0, 0, 32
        DC8 64, 63, 192, 36, 64, 36, 0, 24, 0, 0, 0, 31, 128, 33, 64, 33, 64
        DC8 32, 224, 31, 160, 0, 0, 32, 64, 63, 192, 36, 64, 38, 0, 25, 192, 0
        DC8 64, 24, 192, 36, 64, 36, 64, 34, 64, 49, 128, 0, 0, 48, 0, 32, 64
        DC8 63, 192, 32, 64, 48, 0, 0, 0, 32, 0, 63, 128, 0, 64, 0, 64, 63, 128
        DC8 32, 0, 32, 0, 62, 0, 1, 192, 7, 0, 56, 0, 32, 0, 56, 0, 7, 192, 60
        DC8 0, 7, 192, 56, 0, 0, 0, 32, 64, 57, 192, 6, 0, 57, 192, 32, 64, 0
        DC8 0, 32, 0, 56, 64, 7, 192, 56, 64, 32, 0, 0, 0, 48, 64, 33, 192, 38
        DC8 64, 56, 64, 32, 192, 0, 0, 0, 0, 0, 0, 127, 224, 64, 32, 64, 32, 0
        DC8 0, 0, 0, 112, 0, 12, 0, 3, 128, 0, 64, 0, 0, 0, 0, 64, 32, 64, 32
        DC8 127, 224, 0, 0, 0, 0, 0, 0, 32, 0, 64, 0, 32, 0, 0, 0, 0, 0, 0, 16
        DC8 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 2, 128, 5, 64, 5, 64, 3, 192, 0, 64, 32, 0, 63, 192, 4, 64
        DC8 4, 64, 3, 128, 0, 0, 0, 0, 3, 128, 4, 64, 4, 64, 6, 64, 0, 0, 0, 0
        DC8 3, 128, 4, 64, 36, 64, 63, 192, 0, 64, 0, 0, 3, 128, 5, 64, 5, 64
        DC8 3, 64, 0, 0, 0, 0, 4, 64, 31, 192, 36, 64, 36, 64, 32, 0, 0, 0, 2
        DC8 224, 5, 80, 5, 80, 6, 80, 4, 32, 32, 64, 63, 192, 4, 64, 4, 0, 3
        DC8 192, 0, 64, 0, 0, 4, 64, 39, 192, 0, 64, 0, 0, 0, 0, 0, 16, 0, 16
        DC8 4, 16, 39, 224, 0, 0, 0, 0, 32, 64, 63, 192, 1, 64, 7, 0, 4, 192, 4
        DC8 64, 32, 64, 32, 64, 63, 192, 0, 64, 0, 64, 0, 0, 7, 192, 4, 0, 7
        DC8 192, 4, 0, 3, 192, 0, 0, 4, 64, 7, 192, 4, 64, 4, 0, 3, 192, 0, 64
        DC8 0, 0, 3, 128, 4, 64, 4, 64, 3, 128, 0, 0, 4, 16, 7, 240, 4, 80, 4
        DC8 64, 3, 128, 0, 0, 0, 0, 3, 128, 4, 64, 4, 80, 7, 240, 0, 16, 4, 64
        DC8 7, 192, 2, 64, 4, 0, 4, 0, 0, 0, 0, 0, 6, 64, 5, 64, 5, 64, 4, 192
        DC8 0, 0, 0, 0, 4, 0, 31, 128, 4, 64, 0, 64, 0, 0, 4, 0, 7, 128, 0, 64
        DC8 4, 64, 7, 192, 0, 64, 4, 0, 7, 0, 4, 192, 1, 128, 6, 0, 4, 0, 6, 0
        DC8 1, 192, 7, 0, 1, 192, 6, 0, 0, 0, 4, 64, 6, 192, 1, 0, 6, 192, 4
        DC8 64, 0, 0, 4, 16, 7, 16, 4, 224, 1, 128, 6, 0, 4, 0, 0, 0, 4, 64, 5
        DC8 192, 6, 64, 4, 64, 0, 0, 0, 0, 0, 0, 4, 0, 123, 224, 64, 32, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 255, 240, 0, 0, 0, 0, 0, 0, 64, 32, 123, 224, 4
        DC8 0, 0, 0, 0, 0, 64, 0, 128, 0, 64, 0, 32, 0, 32, 0, 64, 0
//  225 {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
//  226 {0x00,0x00,0x00,0x00,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
//  227 {0x00,0x00,0x30,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00},/*""",2*/
//  228 {0x09,0x00,0x0B,0xC0,0x3D,0x00,0x0B,0xC0,0x3D,0x00,0x09,0x00},/*"#",3*/
//  229 {0x18,0xC0,0x24,0x40,0x7F,0xE0,0x22,0x40,0x31,0x80,0x00,0x00},/*"$",4*/
//  230 {0x18,0x00,0x24,0xC0,0x1B,0x00,0x0D,0x80,0x32,0x40,0x01,0x80},/*"%",5*/
//  231 {0x03,0x80,0x1C,0x40,0x27,0x40,0x1C,0x80,0x07,0x40,0x00,0x40},/*"&",6*/
//  232 {0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
//  233 {0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x20,0x40,0x40,0x20},/*"(",8*/
//  234 {0x00,0x00,0x40,0x20,0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00},/*")",9*/
//  235 {0x09,0x00,0x06,0x00,0x1F,0x80,0x06,0x00,0x09,0x00,0x00,0x00},/*"*",10*/
//  236 {0x04,0x00,0x04,0x00,0x3F,0x80,0x04,0x00,0x04,0x00,0x00,0x00},/*"+",11*/
//  237 {0x00,0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*",",12*/
//  238 {0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00},/*"-",13*/
//  239 {0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
//  240 {0x00,0x20,0x01,0xC0,0x06,0x00,0x38,0x00,0x40,0x00,0x00,0x00},/*"/",15*/
//  241 {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"0",16*/
//  242 {0x00,0x00,0x10,0x40,0x3F,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*"1",17*/
//  243 {0x18,0xC0,0x21,0x40,0x22,0x40,0x24,0x40,0x18,0x40,0x00,0x00},/*"2",18*/
//  244 {0x10,0x80,0x20,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"3",19*/
//  245 {0x02,0x00,0x0D,0x00,0x11,0x00,0x3F,0xC0,0x01,0x40,0x00,0x00},/*"4",20*/
//  246 {0x3C,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x23,0x80,0x00,0x00},/*"5",21*/
//  247 {0x1F,0x80,0x24,0x40,0x24,0x40,0x34,0x40,0x03,0x80,0x00,0x00},/*"6",22*/
//  248 {0x30,0x00,0x20,0x00,0x27,0xC0,0x38,0x00,0x20,0x00,0x00,0x00},/*"7",23*/
//  249 {0x1B,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"8",24*/
//  250 {0x1C,0x00,0x22,0xC0,0x22,0x40,0x22,0x40,0x1F,0x80,0x00,0x00},/*"9",25*/
//  251 {0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
//  252 {0x00,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0x00,0x00,0x00,0x00},/*";",27*/
//  253 {0x00,0x00,0x04,0x00,0x0A,0x00,0x11,0x00,0x20,0x80,0x40,0x40},/*"<",28*/
//  254 {0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x00,0x00},/*"=",29*/
//  255 {0x00,0x00,0x40,0x40,0x20,0x80,0x11,0x00,0x0A,0x00,0x04,0x00},/*">",30*/
//  256 {0x18,0x00,0x20,0x00,0x23,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*"?",31*/
//  257 {0x1F,0x80,0x20,0x40,0x27,0x40,0x29,0x40,0x1F,0x40,0x00,0x00},/*"@",32*/
//  258 {0x00,0x40,0x07,0xC0,0x39,0x00,0x0F,0x00,0x01,0xC0,0x00,0x40},/*"A",33*/
//  259 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*"B",34*/
//  260 {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x30,0x80,0x00,0x00},/*"C",35*/
//  261 {0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"D",36*/
//  262 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x40,0x30,0xC0,0x00,0x00},/*"E",37*/
//  263 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x00,0x30,0x00,0x00,0x00},/*"F",38*/
//  264 {0x0F,0x00,0x10,0x80,0x20,0x40,0x22,0x40,0x33,0x80,0x02,0x00},/*"G",39*/
//  265 {0x20,0x40,0x3F,0xC0,0x04,0x00,0x04,0x00,0x3F,0xC0,0x20,0x40},/*"H",40*/
//  266 {0x20,0x40,0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x00,0x00},/*"I",41*/
//  267 {0x00,0x60,0x20,0x20,0x20,0x20,0x3F,0xC0,0x20,0x00,0x20,0x00},/*"J",42*/
//  268 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x0B,0x00,0x30,0xC0,0x20,0x40},/*"K",43*/
//  269 {0x20,0x40,0x3F,0xC0,0x20,0x40,0x00,0x40,0x00,0x40,0x00,0xC0},/*"L",44*/
//  270 {0x3F,0xC0,0x3C,0x00,0x03,0xC0,0x3C,0x00,0x3F,0xC0,0x00,0x00},/*"M",45*/
//  271 {0x20,0x40,0x3F,0xC0,0x0C,0x40,0x23,0x00,0x3F,0xC0,0x20,0x00},/*"N",46*/
//  272 {0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*"O",47*/
//  273 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*"P",48*/
//  274 {0x1F,0x80,0x21,0x40,0x21,0x40,0x20,0xE0,0x1F,0xA0,0x00,0x00},/*"Q",49*/
//  275 {0x20,0x40,0x3F,0xC0,0x24,0x40,0x26,0x00,0x19,0xC0,0x00,0x40},/*"R",50*/
//  276 {0x18,0xC0,0x24,0x40,0x24,0x40,0x22,0x40,0x31,0x80,0x00,0x00},/*"S",51*/
//  277 {0x30,0x00,0x20,0x40,0x3F,0xC0,0x20,0x40,0x30,0x00,0x00,0x00},/*"T",52*/
//  278 {0x20,0x00,0x3F,0x80,0x00,0x40,0x00,0x40,0x3F,0x80,0x20,0x00},/*"U",53*/
//  279 {0x20,0x00,0x3E,0x00,0x01,0xC0,0x07,0x00,0x38,0x00,0x20,0x00},/*"V",54*/
//  280 {0x38,0x00,0x07,0xC0,0x3C,0x00,0x07,0xC0,0x38,0x00,0x00,0x00},/*"W",55*/
//  281 {0x20,0x40,0x39,0xC0,0x06,0x00,0x39,0xC0,0x20,0x40,0x00,0x00},/*"X",56*/
//  282 {0x20,0x00,0x38,0x40,0x07,0xC0,0x38,0x40,0x20,0x00,0x00,0x00},/*"Y",57*/
//  283 {0x30,0x40,0x21,0xC0,0x26,0x40,0x38,0x40,0x20,0xC0,0x00,0x00},/*"Z",58*/
//  284 {0x00,0x00,0x00,0x00,0x7F,0xE0,0x40,0x20,0x40,0x20,0x00,0x00},/*"[",59*/
//  285 {0x00,0x00,0x70,0x00,0x0C,0x00,0x03,0x80,0x00,0x40,0x00,0x00},/*"\",60*/
//  286 {0x00,0x00,0x40,0x20,0x40,0x20,0x7F,0xE0,0x00,0x00,0x00,0x00},/*"]",61*/
//  287 {0x00,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
//  288 {0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10},/*"_",63*/
//  289 {0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
//  290 {0x00,0x00,0x02,0x80,0x05,0x40,0x05,0x40,0x03,0xC0,0x00,0x40},/*"a",65*/
//  291 {0x20,0x00,0x3F,0xC0,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*"b",66*/
//  292 {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x06,0x40,0x00,0x00},/*"c",67*/
//  293 {0x00,0x00,0x03,0x80,0x04,0x40,0x24,0x40,0x3F,0xC0,0x00,0x40},/*"d",68*/
//  294 {0x00,0x00,0x03,0x80,0x05,0x40,0x05,0x40,0x03,0x40,0x00,0x00},/*"e",69*/
//  295 {0x00,0x00,0x04,0x40,0x1F,0xC0,0x24,0x40,0x24,0x40,0x20,0x00},/*"f",70*/
//  296 {0x00,0x00,0x02,0xE0,0x05,0x50,0x05,0x50,0x06,0x50,0x04,0x20},/*"g",71*/
//  297 {0x20,0x40,0x3F,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*"h",72*/
//  298 {0x00,0x00,0x04,0x40,0x27,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*"i",73*/
//  299 {0x00,0x10,0x00,0x10,0x04,0x10,0x27,0xE0,0x00,0x00,0x00,0x00},/*"j",74*/
//  300 {0x20,0x40,0x3F,0xC0,0x01,0x40,0x07,0x00,0x04,0xC0,0x04,0x40},/*"k",75*/
//  301 {0x20,0x40,0x20,0x40,0x3F,0xC0,0x00,0x40,0x00,0x40,0x00,0x00},/*"l",76*/
//  302 {0x07,0xC0,0x04,0x00,0x07,0xC0,0x04,0x00,0x03,0xC0,0x00,0x00},/*"m",77*/
//  303 {0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*"n",78*/
//  304 {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*"o",79*/
//  305 {0x04,0x10,0x07,0xF0,0x04,0x50,0x04,0x40,0x03,0x80,0x00,0x00},/*"p",80*/
//  306 {0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x50,0x07,0xF0,0x00,0x10},/*"q",81*/
//  307 {0x04,0x40,0x07,0xC0,0x02,0x40,0x04,0x00,0x04,0x00,0x00,0x00},/*"r",82*/
//  308 {0x00,0x00,0x06,0x40,0x05,0x40,0x05,0x40,0x04,0xC0,0x00,0x00},/*"s",83*/
//  309 {0x00,0x00,0x04,0x00,0x1F,0x80,0x04,0x40,0x00,0x40,0x00,0x00},/*"t",84*/
//  310 {0x04,0x00,0x07,0x80,0x00,0x40,0x04,0x40,0x07,0xC0,0x00,0x40},/*"u",85*/
//  311 {0x04,0x00,0x07,0x00,0x04,0xC0,0x01,0x80,0x06,0x00,0x04,0x00},/*"v",86*/
//  312 {0x06,0x00,0x01,0xC0,0x07,0x00,0x01,0xC0,0x06,0x00,0x00,0x00},/*"w",87*/
//  313 {0x04,0x40,0x06,0xC0,0x01,0x00,0x06,0xC0,0x04,0x40,0x00,0x00},/*"x",88*/
//  314 {0x04,0x10,0x07,0x10,0x04,0xE0,0x01,0x80,0x06,0x00,0x04,0x00},/*"y",89*/
//  315 {0x00,0x00,0x04,0x40,0x05,0xC0,0x06,0x40,0x04,0x40,0x00,0x00},/*"z",90*/
//  316 {0x00,0x00,0x00,0x00,0x04,0x00,0x7B,0xE0,0x40,0x20,0x00,0x00},/*"{",91*/
//  317 {0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00},/*"|",92*/
//  318 {0x00,0x00,0x40,0x20,0x7B,0xE0,0x04,0x00,0x00,0x00,0x00,0x00},/*"}",93*/
//  319 {0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x40,0x00},/*"~",94*/
//  320 }; 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  321 const unsigned char asc2_1608[95][16]={	  
asc2_1608:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 31, 204, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 48, 0, 96, 0, 8, 0
        DC8 48, 0, 96, 0, 0, 0, 2, 32, 3, 252, 30, 32, 2, 32, 3, 252, 30, 32, 2
        DC8 32, 0, 0, 0, 0, 14, 24, 17, 4, 63, 255, 16, 132, 12, 120, 0, 0, 0
        DC8 0, 15, 0, 16, 132, 15, 56, 0, 192, 7, 120, 24, 132, 0, 120, 0, 0, 0
        DC8 120, 15, 132, 16, 196, 17, 36, 14, 152, 0, 228, 0, 132, 0, 8, 8, 0
        DC8 104, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
        DC8 224, 24, 24, 32, 4, 64, 2, 0, 0, 0, 0, 64, 2, 32, 4, 24, 24, 7, 224
        DC8 0, 0, 0, 0, 0, 0, 2, 64, 2, 64, 1, 128, 15, 240, 1, 128, 2, 64, 2
        DC8 64, 0, 0, 0, 128, 0, 128, 0, 128, 15, 248, 0, 128, 0, 128, 0, 128
        DC8 0, 0, 0, 1, 0, 13, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 0, 0, 12, 0
        DC8 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 24, 0, 96, 1, 128
        DC8 6, 0, 24, 0, 32, 0, 0, 0, 7, 240, 8, 8, 16, 4, 16, 4, 8, 8, 7, 240
        DC8 0, 0, 0, 0, 8, 4, 8, 4, 31, 252, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 14
        DC8 12, 16, 20, 16, 36, 16, 68, 17, 132, 14, 12, 0, 0, 0, 0, 12, 24, 16
        DC8 4, 17, 4, 17, 4, 18, 136, 12, 112, 0, 0, 0, 0, 0, 224, 3, 32, 4, 36
        DC8 8, 36, 31, 252, 0, 36, 0, 0, 0, 0, 31, 152, 16, 132, 17, 4, 17, 4
        DC8 16, 136, 16, 112, 0, 0, 0, 0, 7, 240, 8, 136, 17, 4, 17, 4, 24, 136
        DC8 0, 112, 0, 0, 0, 0, 28, 0, 16, 0, 16, 252, 19, 0, 28, 0, 16, 0, 0
        DC8 0, 0, 0, 14, 56, 17, 68, 16, 132, 16, 132, 17, 68, 14, 56, 0, 0, 0
        DC8 0, 7, 0, 8, 140, 16, 68, 16, 68, 8, 136, 7, 240, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 3, 12, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 64, 2, 32, 4, 16, 8, 8, 16, 4, 0
        DC8 0, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 32, 0, 0, 0, 0, 16
        DC8 4, 8, 8, 4, 16, 2, 32, 1, 64, 0, 128, 0, 0, 0, 0, 14, 0, 18, 0, 16
        DC8 12, 16, 108, 16, 128, 15, 0, 0, 0, 3, 224, 12, 24, 19, 228, 20, 36
        DC8 23, 196, 8, 40, 7, 208, 0, 0, 0, 4, 0, 60, 3, 196, 28, 64, 7, 64, 0
        DC8 228, 0, 28, 0, 4, 16, 4, 31, 252, 17, 4, 17, 4, 17, 4, 14, 136, 0
        DC8 112, 0, 0, 3, 224, 12, 24, 16, 4, 16, 4, 16, 4, 16, 8, 28, 16, 0, 0
        DC8 16, 4, 31, 252, 16, 4, 16, 4, 16, 4, 8, 8, 7, 240, 0, 0, 16, 4, 31
        DC8 252, 17, 4, 17, 4, 23, 196, 16, 4, 8, 24, 0, 0, 16, 4, 31, 252, 17
        DC8 4, 17, 0, 23, 192, 16, 0, 8, 0, 0, 0, 3, 224, 12, 24, 16, 4, 16, 4
        DC8 16, 68, 28, 120, 0, 64, 0, 0, 16, 4, 31, 252, 16, 132, 0, 128, 0
        DC8 128, 16, 132, 31, 252, 16, 4, 0, 0, 16, 4, 16, 4, 31, 252, 16, 4
        DC8 16, 4, 0, 0, 0, 0, 0, 3, 0, 1, 16, 1, 16, 1, 31, 254, 16, 0, 16, 0
        DC8 0, 0, 16, 4, 31, 252, 17, 4, 3, 128, 20, 100, 24, 28, 16, 4, 0, 0
        DC8 16, 4, 31, 252, 16, 4, 0, 4, 0, 4, 0, 4, 0, 12, 0, 0, 16, 4, 31
        DC8 252, 31, 0, 0, 252, 31, 0, 31, 252, 16, 4, 0, 0, 16, 4, 31, 252, 12
        DC8 4, 3, 0, 0, 224, 16, 24, 31, 252, 16, 0, 7, 240, 8, 8, 16, 4, 16, 4
        DC8 16, 4, 8, 8, 7, 240, 0, 0, 16, 4, 31, 252, 16, 132, 16, 128, 16
        DC8 128, 16, 128, 15, 0, 0, 0, 7, 240, 8, 24, 16, 36, 16, 36, 16, 28, 8
        DC8 10, 7, 242, 0, 0, 16, 4, 31, 252, 17, 4, 17, 0, 17, 192, 17, 48, 14
        DC8 12, 0, 4, 0, 0, 14, 28, 17, 4, 16, 132, 16, 132, 16, 68, 28, 56, 0
        DC8 0, 24, 0, 16, 0, 16, 4, 31, 252, 16, 4, 16, 0, 24, 0, 0, 0, 16, 0
        DC8 31, 248, 16, 4, 0, 4, 0, 4, 16, 4, 31, 248, 16, 0, 16, 0, 30, 0, 17
        DC8 224, 0, 28, 0, 112, 19, 128, 28, 0, 16, 0, 31, 192, 16, 60, 0, 224
        DC8 31, 0, 0, 224, 16, 60, 31, 192, 0, 0, 16, 4, 24, 12, 22, 52, 1, 192
        DC8 1, 192, 22, 52, 24, 12, 16, 4, 16, 0, 28, 0, 19, 4, 0, 252, 19, 4
        DC8 28, 0, 16, 0, 0, 0, 8, 4, 16, 28, 16, 100, 16, 132, 19, 4, 28, 4
        DC8 16, 24, 0, 0, 0, 0, 0, 0, 0, 0, 127, 254, 64, 2, 64, 2, 64, 2, 0, 0
        DC8 0, 0, 48, 0, 12, 0, 3, 128, 0, 96, 0, 28, 0, 3, 0, 0, 0, 0, 64, 2
        DC8 64, 2, 64, 2, 127, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 64, 0
        DC8 64, 0, 64, 0, 32, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1
        DC8 0, 1, 0, 0, 64, 0, 64, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 152, 1, 36, 1, 68, 1, 68, 1, 68, 0, 252, 0, 4, 16, 0, 31, 252, 0
        DC8 136, 1, 4, 1, 4, 0, 136, 0, 112, 0, 0, 0, 0, 0, 112, 0, 136, 1, 4
        DC8 1, 4, 1, 4, 0, 136, 0, 0, 0, 0, 0, 112, 0, 136, 1, 4, 1, 4, 17, 8
        DC8 31, 252, 0, 4, 0, 0, 0, 248, 1, 68, 1, 68, 1, 68, 1, 68, 0, 200, 0
        DC8 0, 0, 0, 1, 4, 1, 4, 15, 252, 17, 4, 17, 4, 17, 0, 24, 0, 0, 0, 0
        DC8 214, 1, 41, 1, 41, 1, 41, 1, 201, 1, 6, 0, 0, 16, 4, 31, 252, 0
        DC8 132, 1, 0, 1, 0, 1, 4, 0, 252, 0, 4, 0, 0, 1, 4, 25, 4, 25, 252, 0
        DC8 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1, 1, 25, 1, 25, 254, 0, 0
        DC8 0, 0, 16, 4, 31, 252, 0, 36, 0, 64, 1, 180, 1, 12, 1, 4, 0, 0, 0, 0
        DC8 16, 4, 16, 4, 31, 252, 0, 4, 0, 4, 0, 0, 0, 0, 1, 4, 1, 252, 1, 4
        DC8 1, 0, 1, 252, 1, 4, 1, 0, 0, 252, 1, 4, 1, 252, 0, 132, 1, 0, 1, 0
        DC8 1, 4, 0, 252, 0, 4, 0, 0, 0, 248, 1, 4, 1, 4, 1, 4, 1, 4, 0, 248, 0
        DC8 0, 1, 1, 1, 255, 0, 133, 1, 4, 1, 4, 0, 136, 0, 112, 0, 0, 0, 0, 0
        DC8 112, 0, 136, 1, 4, 1, 4, 1, 5, 1, 255, 0, 1, 1, 4, 1, 4, 1, 252, 0
        DC8 132, 1, 4, 1, 0, 1, 128, 0, 0, 0, 0, 0, 204, 1, 36, 1, 36, 1, 36, 1
        DC8 36, 1, 152, 0, 0, 0, 0, 1, 0, 1, 0, 7, 248, 1, 4, 1, 4, 0, 0, 0, 0
        DC8 1, 0, 1, 248, 0, 4, 0, 4, 0, 4, 1, 8, 1, 252, 0, 4, 1, 0, 1, 128, 1
        DC8 112, 0, 12, 0, 16, 1, 96, 1, 128, 1, 0, 1, 240, 1, 12, 0, 48, 1
        DC8 192, 0, 48, 1, 12, 1, 240, 1, 0, 0, 0, 1, 4, 1, 140, 0, 116, 1, 112
        DC8 1, 140, 1, 4, 0, 0, 1, 1, 1, 129, 1, 113, 0, 14, 0, 24, 1, 96, 1
        DC8 128, 1, 0, 0, 0, 1, 132, 1, 12, 1, 52, 1, 68, 1, 132, 1, 12, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 62, 252, 64, 2, 64, 2, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 64, 2, 64, 2, 62, 252, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 128, 0, 128, 0, 64, 0, 64, 0, 32
        DC8 0, 32, 0
//  322 {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
//  323 {0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xCC,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
//  324 {0x00,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x00,0x00},/*""",2*/
//  325 {0x02,0x20,0x03,0xFC,0x1E,0x20,0x02,0x20,0x03,0xFC,0x1E,0x20,0x02,0x20,0x00,0x00},/*"#",3*/
//  326 {0x00,0x00,0x0E,0x18,0x11,0x04,0x3F,0xFF,0x10,0x84,0x0C,0x78,0x00,0x00,0x00,0x00},/*"$",4*/
//  327 {0x0F,0x00,0x10,0x84,0x0F,0x38,0x00,0xC0,0x07,0x78,0x18,0x84,0x00,0x78,0x00,0x00},/*"%",5*/
//  328 {0x00,0x78,0x0F,0x84,0x10,0xC4,0x11,0x24,0x0E,0x98,0x00,0xE4,0x00,0x84,0x00,0x08},/*"&",6*/
//  329 {0x08,0x00,0x68,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
//  330 {0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x18,0x18,0x20,0x04,0x40,0x02,0x00,0x00},/*"(",8*/
//  331 {0x00,0x00,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*")",9*/
//  332 {0x02,0x40,0x02,0x40,0x01,0x80,0x0F,0xF0,0x01,0x80,0x02,0x40,0x02,0x40,0x00,0x00},/*"*",10*/
//  333 {0x00,0x80,0x00,0x80,0x00,0x80,0x0F,0xF8,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},/*"+",11*/
//  334 {0x00,0x01,0x00,0x0D,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*",",12*/
//  335 {0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},/*"-",13*/
//  336 {0x00,0x00,0x00,0x0C,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
//  337 {0x00,0x00,0x00,0x06,0x00,0x18,0x00,0x60,0x01,0x80,0x06,0x00,0x18,0x00,0x20,0x00},/*"/",15*/
//  338 {0x00,0x00,0x07,0xF0,0x08,0x08,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"0",16*/
//  339 {0x00,0x00,0x08,0x04,0x08,0x04,0x1F,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"1",17*/
//  340 {0x00,0x00,0x0E,0x0C,0x10,0x14,0x10,0x24,0x10,0x44,0x11,0x84,0x0E,0x0C,0x00,0x00},/*"2",18*/
//  341 {0x00,0x00,0x0C,0x18,0x10,0x04,0x11,0x04,0x11,0x04,0x12,0x88,0x0C,0x70,0x00,0x00},/*"3",19*/
//  342 {0x00,0x00,0x00,0xE0,0x03,0x20,0x04,0x24,0x08,0x24,0x1F,0xFC,0x00,0x24,0x00,0x00},/*"4",20*/
//  343 {0x00,0x00,0x1F,0x98,0x10,0x84,0x11,0x04,0x11,0x04,0x10,0x88,0x10,0x70,0x00,0x00},/*"5",21*/
//  344 {0x00,0x00,0x07,0xF0,0x08,0x88,0x11,0x04,0x11,0x04,0x18,0x88,0x00,0x70,0x00,0x00},/*"6",22*/
//  345 {0x00,0x00,0x1C,0x00,0x10,0x00,0x10,0xFC,0x13,0x00,0x1C,0x00,0x10,0x00,0x00,0x00},/*"7",23*/
//  346 {0x00,0x00,0x0E,0x38,0x11,0x44,0x10,0x84,0x10,0x84,0x11,0x44,0x0E,0x38,0x00,0x00},/*"8",24*/
//  347 {0x00,0x00,0x07,0x00,0x08,0x8C,0x10,0x44,0x10,0x44,0x08,0x88,0x07,0xF0,0x00,0x00},/*"9",25*/
//  348 {0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0C,0x03,0x0C,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
//  349 {0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*";",27*/
//  350 {0x00,0x00,0x00,0x80,0x01,0x40,0x02,0x20,0x04,0x10,0x08,0x08,0x10,0x04,0x00,0x00},/*"<",28*/
//  351 {0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x00,0x00},/*"=",29*/
//  352 {0x00,0x00,0x10,0x04,0x08,0x08,0x04,0x10,0x02,0x20,0x01,0x40,0x00,0x80,0x00,0x00},/*">",30*/
//  353 {0x00,0x00,0x0E,0x00,0x12,0x00,0x10,0x0C,0x10,0x6C,0x10,0x80,0x0F,0x00,0x00,0x00},/*"?",31*/
//  354 {0x03,0xE0,0x0C,0x18,0x13,0xE4,0x14,0x24,0x17,0xC4,0x08,0x28,0x07,0xD0,0x00,0x00},/*"@",32*/
//  355 {0x00,0x04,0x00,0x3C,0x03,0xC4,0x1C,0x40,0x07,0x40,0x00,0xE4,0x00,0x1C,0x00,0x04},/*"A",33*/
//  356 {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x0E,0x88,0x00,0x70,0x00,0x00},/*"B",34*/
//  357 {0x03,0xE0,0x0C,0x18,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x08,0x1C,0x10,0x00,0x00},/*"C",35*/
//  358 {0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"D",36*/
//  359 {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x04,0x17,0xC4,0x10,0x04,0x08,0x18,0x00,0x00},/*"E",37*/
//  360 {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x00,0x17,0xC0,0x10,0x00,0x08,0x00,0x00,0x00},/*"F",38*/
//  361 {0x03,0xE0,0x0C,0x18,0x10,0x04,0x10,0x04,0x10,0x44,0x1C,0x78,0x00,0x40,0x00,0x00},/*"G",39*/
//  362 {0x10,0x04,0x1F,0xFC,0x10,0x84,0x00,0x80,0x00,0x80,0x10,0x84,0x1F,0xFC,0x10,0x04},/*"H",40*/
//  363 {0x00,0x00,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x00,0x00,0x00,0x00},/*"I",41*/
//  364 {0x00,0x03,0x00,0x01,0x10,0x01,0x10,0x01,0x1F,0xFE,0x10,0x00,0x10,0x00,0x00,0x00},/*"J",42*/
//  365 {0x10,0x04,0x1F,0xFC,0x11,0x04,0x03,0x80,0x14,0x64,0x18,0x1C,0x10,0x04,0x00,0x00},/*"K",43*/
//  366 {0x10,0x04,0x1F,0xFC,0x10,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x00},/*"L",44*/
//  367 {0x10,0x04,0x1F,0xFC,0x1F,0x00,0x00,0xFC,0x1F,0x00,0x1F,0xFC,0x10,0x04,0x00,0x00},/*"M",45*/
//  368 {0x10,0x04,0x1F,0xFC,0x0C,0x04,0x03,0x00,0x00,0xE0,0x10,0x18,0x1F,0xFC,0x10,0x00},/*"N",46*/
//  369 {0x07,0xF0,0x08,0x08,0x10,0x04,0x10,0x04,0x10,0x04,0x08,0x08,0x07,0xF0,0x00,0x00},/*"O",47*/
//  370 {0x10,0x04,0x1F,0xFC,0x10,0x84,0x10,0x80,0x10,0x80,0x10,0x80,0x0F,0x00,0x00,0x00},/*"P",48*/
//  371 {0x07,0xF0,0x08,0x18,0x10,0x24,0x10,0x24,0x10,0x1C,0x08,0x0A,0x07,0xF2,0x00,0x00},/*"Q",49*/
//  372 {0x10,0x04,0x1F,0xFC,0x11,0x04,0x11,0x00,0x11,0xC0,0x11,0x30,0x0E,0x0C,0x00,0x04},/*"R",50*/
//  373 {0x00,0x00,0x0E,0x1C,0x11,0x04,0x10,0x84,0x10,0x84,0x10,0x44,0x1C,0x38,0x00,0x00},/*"S",51*/
//  374 {0x18,0x00,0x10,0x00,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x00,0x18,0x00,0x00,0x00},/*"T",52*/
//  375 {0x10,0x00,0x1F,0xF8,0x10,0x04,0x00,0x04,0x00,0x04,0x10,0x04,0x1F,0xF8,0x10,0x00},/*"U",53*/
//  376 {0x10,0x00,0x1E,0x00,0x11,0xE0,0x00,0x1C,0x00,0x70,0x13,0x80,0x1C,0x00,0x10,0x00},/*"V",54*/
//  377 {0x1F,0xC0,0x10,0x3C,0x00,0xE0,0x1F,0x00,0x00,0xE0,0x10,0x3C,0x1F,0xC0,0x00,0x00},/*"W",55*/
//  378 {0x10,0x04,0x18,0x0C,0x16,0x34,0x01,0xC0,0x01,0xC0,0x16,0x34,0x18,0x0C,0x10,0x04},/*"X",56*/
//  379 {0x10,0x00,0x1C,0x00,0x13,0x04,0x00,0xFC,0x13,0x04,0x1C,0x00,0x10,0x00,0x00,0x00},/*"Y",57*/
//  380 {0x08,0x04,0x10,0x1C,0x10,0x64,0x10,0x84,0x13,0x04,0x1C,0x04,0x10,0x18,0x00,0x00},/*"Z",58*/
//  381 {0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x40,0x02,0x40,0x02,0x40,0x02,0x00,0x00},/*"[",59*/
//  382 {0x00,0x00,0x30,0x00,0x0C,0x00,0x03,0x80,0x00,0x60,0x00,0x1C,0x00,0x03,0x00,0x00},/*"\",60*/
//  383 {0x00,0x00,0x40,0x02,0x40,0x02,0x40,0x02,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00},/*"]",61*/
//  384 {0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x00,0x00},/*"^",62*/
//  385 {0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01},/*"_",63*/
//  386 {0x00,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
//  387 {0x00,0x00,0x00,0x98,0x01,0x24,0x01,0x44,0x01,0x44,0x01,0x44,0x00,0xFC,0x00,0x04},/*"a",65*/
//  388 {0x10,0x00,0x1F,0xFC,0x00,0x88,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x70,0x00,0x00},/*"b",66*/
//  389 {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x00},/*"c",67*/
//  390 {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x11,0x08,0x1F,0xFC,0x00,0x04},/*"d",68*/
//  391 {0x00,0x00,0x00,0xF8,0x01,0x44,0x01,0x44,0x01,0x44,0x01,0x44,0x00,0xC8,0x00,0x00},/*"e",69*/
//  392 {0x00,0x00,0x01,0x04,0x01,0x04,0x0F,0xFC,0x11,0x04,0x11,0x04,0x11,0x00,0x18,0x00},/*"f",70*/
//  393 {0x00,0x00,0x00,0xD6,0x01,0x29,0x01,0x29,0x01,0x29,0x01,0xC9,0x01,0x06,0x00,0x00},/*"g",71*/
//  394 {0x10,0x04,0x1F,0xFC,0x00,0x84,0x01,0x00,0x01,0x00,0x01,0x04,0x00,0xFC,0x00,0x04},/*"h",72*/
//  395 {0x00,0x00,0x01,0x04,0x19,0x04,0x19,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"i",73*/
//  396 {0x00,0x00,0x00,0x03,0x00,0x01,0x01,0x01,0x19,0x01,0x19,0xFE,0x00,0x00,0x00,0x00},/*"j",74*/
//  397 {0x10,0x04,0x1F,0xFC,0x00,0x24,0x00,0x40,0x01,0xB4,0x01,0x0C,0x01,0x04,0x00,0x00},/*"k",75*/
//  398 {0x00,0x00,0x10,0x04,0x10,0x04,0x1F,0xFC,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00},/*"l",76*/
//  399 {0x01,0x04,0x01,0xFC,0x01,0x04,0x01,0x00,0x01,0xFC,0x01,0x04,0x01,0x00,0x00,0xFC},/*"m",77*/
//  400 {0x01,0x04,0x01,0xFC,0x00,0x84,0x01,0x00,0x01,0x00,0x01,0x04,0x00,0xFC,0x00,0x04},/*"n",78*/
//  401 {0x00,0x00,0x00,0xF8,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x00,0xF8,0x00,0x00},/*"o",79*/
//  402 {0x01,0x01,0x01,0xFF,0x00,0x85,0x01,0x04,0x01,0x04,0x00,0x88,0x00,0x70,0x00,0x00},/*"p",80*/
//  403 {0x00,0x00,0x00,0x70,0x00,0x88,0x01,0x04,0x01,0x04,0x01,0x05,0x01,0xFF,0x00,0x01},/*"q",81*/
//  404 {0x01,0x04,0x01,0x04,0x01,0xFC,0x00,0x84,0x01,0x04,0x01,0x00,0x01,0x80,0x00,0x00},/*"r",82*/
//  405 {0x00,0x00,0x00,0xCC,0x01,0x24,0x01,0x24,0x01,0x24,0x01,0x24,0x01,0x98,0x00,0x00},/*"s",83*/
//  406 {0x00,0x00,0x01,0x00,0x01,0x00,0x07,0xF8,0x01,0x04,0x01,0x04,0x00,0x00,0x00,0x00},/*"t",84*/
//  407 {0x01,0x00,0x01,0xF8,0x00,0x04,0x00,0x04,0x00,0x04,0x01,0x08,0x01,0xFC,0x00,0x04},/*"u",85*/
//  408 {0x01,0x00,0x01,0x80,0x01,0x70,0x00,0x0C,0x00,0x10,0x01,0x60,0x01,0x80,0x01,0x00},/*"v",86*/
//  409 {0x01,0xF0,0x01,0x0C,0x00,0x30,0x01,0xC0,0x00,0x30,0x01,0x0C,0x01,0xF0,0x01,0x00},/*"w",87*/
//  410 {0x00,0x00,0x01,0x04,0x01,0x8C,0x00,0x74,0x01,0x70,0x01,0x8C,0x01,0x04,0x00,0x00},/*"x",88*/
//  411 {0x01,0x01,0x01,0x81,0x01,0x71,0x00,0x0E,0x00,0x18,0x01,0x60,0x01,0x80,0x01,0x00},/*"y",89*/
//  412 {0x00,0x00,0x01,0x84,0x01,0x0C,0x01,0x34,0x01,0x44,0x01,0x84,0x01,0x0C,0x00,0x00},/*"z",90*/
//  413 {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x3E,0xFC,0x40,0x02,0x40,0x02},/*"{",91*/
//  414 {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00},/*"|",92*/
//  415 {0x00,0x00,0x40,0x02,0x40,0x02,0x3E,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"}",93*/
//  416 {0x00,0x00,0x60,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00},/*"~",94*/
//  417 };      
//  418 //¹ÜÀíLCDÖØÒª²ÎÊý

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  419 _lcd_dev lcddev;
lcddev:
        DS8 12
//  420 //Ð´¼Ä´æÆ÷º¯Êý
//  421 //regval:¼Ä´æÆ÷Öµ

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function LCD_WR_REG
        THUMB
//  422 void LCD_WR_REG(uint16 regval)
//  423 { 
LCD_WR_REG:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
        MOVS     R4,R0
//  424     uint8 regv=(uint8)(regval&0xff);
        MOVS     R0,R4
        STRB     R0,[SP, #+0]
//  425     SPILCD_RS_RESET;
        MOVS     R2,#+0
        MOVS     R1,#+13
        MOVS     R0,#+0
          CFI FunCall GPIO_SET
        BL       GPIO_SET
//  426 	SPI_Send(TFT_SPI_NUM,1,&regv);	   		 
        ADD      R2,SP,#+0
        MOVS     R1,#+1
        MOVS     R0,#+0
          CFI FunCall SPI_Send
        BL       SPI_Send
//  427 }
        POP      {R0,R1,R4,PC}    ;; return
          CFI EndBlock cfiBlock0
//  428 //Ð´LCDÊý¾Ý
//  429 //data:ÒªÐ´ÈëµÄÖµ

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function LCD_WR_DATA
        THUMB
//  430 void LCD_WR_DATA(uint16 data)
//  431 {
LCD_WR_DATA:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
        MOVS     R4,R0
//  432  	//SPILCD_CS_RESET;  //LCD_CS=0
//  433     uint8 data1[2];
//  434     data1[0]=(uint8)((data>>8)&0xff);
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSRS     R0,R4,#+8
        STRB     R0,[SP, #+0]
//  435     data1[1]=(uint8)(data&0xff);
        MOVS     R0,R4
        STRB     R0,[SP, #+1]
//  436 	SPILCD_RS_SET;	
        MOVS     R2,#+1
        MOVS     R1,#+13
        MOVS     R0,#+0
          CFI FunCall GPIO_SET
        BL       GPIO_SET
//  437     SPI_Send(TFT_SPI_NUM,2,data1);	
        ADD      R2,SP,#+0
        MOVS     R1,#+2
        MOVS     R0,#+0
          CFI FunCall SPI_Send
        BL       SPI_Send
//  438 }
        POP      {R0,R1,R4,PC}    ;; return
          CFI EndBlock cfiBlock1

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function LCD_WR_DATA8
        THUMB
//  439 void LCD_WR_DATA8(uint8 da)   //Ð´8Î»Êý¾Ý
//  440 {
LCD_WR_DATA8:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  441 	SPILCD_RS_SET;				    	   
        MOVS     R2,#+1
        MOVS     R1,#+13
        MOVS     R0,#+0
          CFI FunCall GPIO_SET
        BL       GPIO_SET
//  442 	SPI_Send(TFT_SPI_NUM,1,&da);  			 
        ADD      R2,SP,#+0
        MOVS     R1,#+1
        MOVS     R0,#+0
          CFI FunCall SPI_Send
        BL       SPI_Send
//  443 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock2
//  444 //Ð´¼Ä´æÆ÷
//  445 //LCD_Reg:¼Ä´æÆ÷µØÖ·
//  446 //LCD_RegValue:ÒªÐ´ÈëµÄÊý¾Ý

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function LCD_WR_REG_DATA
        THUMB
//  447 void LCD_WR_REG_DATA(uint8 LCD_Reg, uint16 LCD_RegValue)
//  448 {
LCD_WR_REG_DATA:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
//  449 	LCD_WR_REG(LCD_Reg);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  450 	LCD_WR_DATA(LCD_RegValue);
        MOVS     R0,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  451 }
        POP      {R0,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock3
//  452 //¿ªÊ¼Ð´GRAM

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function LCD_WriteRAM_Prepare
        THUMB
//  453 void LCD_WriteRAM_Prepare(void)
//  454 {
LCD_WriteRAM_Prepare:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  455 	LCD_WR_REG(lcddev.wramcmd);  
        LDR.W    R0,??DataTable11
        LDRB     R0,[R0, #+6]
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  456 }	 
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock4
//  457 //µ±mdk -O1Ê±¼äÓÅ»¯Ê±ÐèÒªÉèÖÃ
//  458 //ÑÓÊ±i

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function opt_delay
          CFI NoCalls
        THUMB
//  459 void opt_delay(uint8 i)
//  460 {
//  461 	while(i--);
opt_delay:
??opt_delay_0:
        MOVS     R1,R0
        SUBS     R0,R1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+0
        BNE.N    ??opt_delay_0
//  462 }  		 
        BX       LR               ;; return
          CFI EndBlock cfiBlock5
//  463 //LCD¿ªÆôÏÔÊ¾

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function LCD_DisplayOn
          CFI NoCalls
        THUMB
//  464 void LCD_DisplayOn(void)
//  465 {					   
//  466 
//  467 }	 
LCD_DisplayOn:
        BX       LR               ;; return
          CFI EndBlock cfiBlock6
//  468 //LCD¹Ø±ÕÏÔÊ¾

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function LCD_DisplayOff
          CFI NoCalls
        THUMB
//  469 void LCD_DisplayOff(void)
//  470 {	   
//  471 
//  472 }   
LCD_DisplayOff:
        BX       LR               ;; return
          CFI EndBlock cfiBlock7
//  473 
//  474 //ÉèÖÃ¹â±êÎ»ÖÃ
//  475 //Xpos:ºá×ø±ê
//  476 //Ypos:×Ý×ø±ê

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function LCD_SetCursor
        THUMB
//  477 void LCD_SetCursor(uint16 Xpos, uint16 Ypos)
//  478 {
LCD_SetCursor:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
//  479     LCD_WR_REG(lcddev.setxcmd); 
        LDR.W    R0,??DataTable11
        LDRB     R0,[R0, #+7]
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  480 	LCD_WR_DATA8(Xpos>>8); 
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSRS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  481 	LCD_WR_DATA8(Xpos&0XFF);	 
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  482 	LCD_WR_REG(lcddev.setycmd); 
        LDR.W    R0,??DataTable11
        LDRB     R0,[R0, #+9]
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  483 	LCD_WR_DATA8(Ypos>>8); 
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LSRS     R0,R5,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  484 	LCD_WR_DATA8(Ypos&0XFF);
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  485 } 	  
        POP      {R0,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock8
//  486 
//  487 //»­µã
//  488 //x,y:×ø±ê
//  489 //POINT_COLOR:´ËµãµÄÑÕÉ«

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function LCD_DrawPoint
        THUMB
//  490 void LCD_DrawPoint(uint16 x,uint16 y)
//  491 {
LCD_DrawPoint:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
//  492 	LCD_SetCursor(x,y);		//ÉèÖÃ¹â±êÎ»ÖÃ 
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  493 	LCD_WriteRAM_Prepare();	//¿ªÊ¼Ð´ÈëGRAM
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  494 	LCD_WR_DATA(POINT_COLOR); 
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  495 } 
        POP      {R0,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock9
//  496 //³õÊ¼»¯lcd

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function TFT_Init
        THUMB
//  497 void TFT_Init(void)
//  498 { 	 	
TFT_Init:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
//  499 	SPILCD_RST_RESET ;	//LCD_RST=0	 //SPI½Ó¿Ú¸´Î»
        MOVS     R2,#+0
        MOVS     R1,#+12
        MOVS     R0,#+0
          CFI FunCall GPIO_SET
        BL       GPIO_SET
//  500 	SYSDelay_ms(20); // delay 20 ms 
        MOVS     R0,#+20
          CFI FunCall SYSDelay_ms
        BL       SYSDelay_ms
//  501     SPILCD_RST_SET ;	//LCD_RST=1		
        MOVS     R2,#+1
        MOVS     R1,#+12
        MOVS     R0,#+0
          CFI FunCall GPIO_SET
        BL       GPIO_SET
//  502 	SYSDelay_ms(20);
        MOVS     R0,#+20
          CFI FunCall SYSDelay_ms
        BL       SYSDelay_ms
//  503     
//  504     
//  505     lcddev.width=320;
        MOV      R0,#+320
        LDR.W    R1,??DataTable12_1
        STRH     R0,[R1, #+0]
//  506 	lcddev.height=240;
        MOVS     R0,#+240
        LDR.W    R1,??DataTable12_1
        STRH     R0,[R1, #+2]
//  507     lcddev.dir=1;//1±íÊ¾ºáÆÁ£¬0±íÊ¾ÊúÆÁ,»¹Òª¸Ä±ä0x36¼Ä´æÆ÷¸Ä±ä·½Ïò
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_1
        STRB     R0,[R1, #+8]
//  508 	lcddev.wramcmd=0X2C;
        MOVS     R0,#+44
        LDR.W    R1,??DataTable12_1
        STRB     R0,[R1, #+6]
//  509 	lcddev.setxcmd=0X2A;
        MOVS     R0,#+42
        LDR.W    R1,??DataTable12_1
        STRB     R0,[R1, #+7]
//  510 	lcddev.setycmd=0X2B; 
        MOVS     R0,#+43
        LDR.W    R1,??DataTable12_1
        STRB     R0,[R1, #+9]
//  511     
//  512     if(lcddev.dir==0)
        LDR.W    R0,??DataTable12_1
        LDRB     R0,[R0, #+8]
        CMP      R0,#+0
        BNE.N    ??TFT_Init_0
//  513      {
//  514          uint16 temp;
//  515          temp=lcddev.width;
        LDR.W    R1,??DataTable12_1
        LDRH     R1,[R1, #+0]
        MOVS     R0,R1
//  516          lcddev.width=lcddev.height;
        LDR.W    R1,??DataTable12_1
        LDRH     R1,[R1, #+2]
        LDR.W    R2,??DataTable12_1
        STRH     R1,[R2, #+0]
//  517          lcddev.height=temp;
        LDR.W    R1,??DataTable12_1
        STRH     R0,[R1, #+2]
//  518      }
//  519 		LCD_WR_REG(0xCB);  
??TFT_Init_0:
        MOVS     R0,#+203
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  520         LCD_WR_DATA8(0x39); 
        MOVS     R0,#+57
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  521         LCD_WR_DATA8(0x2C); 
        MOVS     R0,#+44
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  522         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  523         LCD_WR_DATA8(0x34); 
        MOVS     R0,#+52
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  524         LCD_WR_DATA8(0x02); 
        MOVS     R0,#+2
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  525 
//  526         LCD_WR_REG(0xCF);  
        MOVS     R0,#+207
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  527         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  528         LCD_WR_DATA8(0XC1); 
        MOVS     R0,#+193
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  529         LCD_WR_DATA8(0X30); 
        MOVS     R0,#+48
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  530  
//  531         LCD_WR_REG(0xE8);  
        MOVS     R0,#+232
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  532         LCD_WR_DATA8(0x85); 
        MOVS     R0,#+133
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  533         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  534         LCD_WR_DATA8(0x78); 
        MOVS     R0,#+120
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  535  
//  536         LCD_WR_REG(0xEA);  
        MOVS     R0,#+234
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  537         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  538         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  539  
//  540         LCD_WR_REG(0xED);  
        MOVS     R0,#+237
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  541         LCD_WR_DATA8(0x64); 
        MOVS     R0,#+100
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  542         LCD_WR_DATA8(0x03); 
        MOVS     R0,#+3
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  543         LCD_WR_DATA8(0X12); 
        MOVS     R0,#+18
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  544         LCD_WR_DATA8(0X81); 
        MOVS     R0,#+129
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  545 
//  546         LCD_WR_REG(0xF7);  
        MOVS     R0,#+247
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  547         LCD_WR_DATA8(0x20); 
        MOVS     R0,#+32
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  548   
//  549         LCD_WR_REG(0xC0);    //Power control 
        MOVS     R0,#+192
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  550         LCD_WR_DATA8(0x23);   //VRH[5:0] 
        MOVS     R0,#+35
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  551  
//  552         LCD_WR_REG(0xC1);    //Power control 
        MOVS     R0,#+193
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  553         LCD_WR_DATA8(0x10);   //SAP[2:0];BT[3:0] 
        MOVS     R0,#+16
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  554  
//  555         LCD_WR_REG(0xC5);    //VCM control 
        MOVS     R0,#+197
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  556         LCD_WR_DATA8(0x3e); //¶Ô±È¶Èµ÷½Ú
        MOVS     R0,#+62
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  557         LCD_WR_DATA8(0x28); 
        MOVS     R0,#+40
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  558  
//  559         LCD_WR_REG(0xC7);    //VCM control2 
        MOVS     R0,#+199
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  560         LCD_WR_DATA8(0x86);  //--
        MOVS     R0,#+134
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  561  
//  562         LCD_WR_REG(0x36);    // Memory Access Control 
        MOVS     R0,#+54
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  563         LCD_WR_DATA8(0x28); //C8	   //48 68ÊúÆÁ//28 E8 ºáÆÁ 
        MOVS     R0,#+40
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  564         
//  565         
//  566         LCD_WR_REG(lcddev.setxcmd); 
        LDR.W    R0,??DataTable12_1
        LDRB     R0,[R0, #+7]
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  567         LCD_WR_DATA(0);
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  568         LCD_WR_DATA(lcddev.width-1);
        LDR.W    R0,??DataTable12_1
        LDRH     R0,[R0, #+0]
        SUBS     R0,R0,#+1
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  569         LCD_WR_REG(lcddev.setycmd); 
        LDR.W    R0,??DataTable12_1
        LDRB     R0,[R0, #+9]
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  570         LCD_WR_DATA(0);
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  571         LCD_WR_DATA(lcddev.height-1);
        LDR.W    R0,??DataTable12_1
        LDRH     R0,[R0, #+2]
        SUBS     R0,R0,#+1
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  572         
//  573         LCD_WR_REG(0x3A);    
        MOVS     R0,#+58
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  574         LCD_WR_DATA8(0x55); 
        MOVS     R0,#+85
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  575 
//  576         LCD_WR_REG(0xB1);    
        MOVS     R0,#+177
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  577         LCD_WR_DATA8(0x00);  
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  578         LCD_WR_DATA8(0x18); 
        MOVS     R0,#+24
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  579  
//  580         LCD_WR_REG(0xB6);    // Display Function Control 
        MOVS     R0,#+182
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  581         LCD_WR_DATA8(0x08); 
        MOVS     R0,#+8
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  582         LCD_WR_DATA8(0x82);
        MOVS     R0,#+130
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  583         LCD_WR_DATA8(0x27);  
        MOVS     R0,#+39
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  584  
//  585         LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
        MOVS     R0,#+242
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  586         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  587  
//  588         LCD_WR_REG(0x26);    //Gamma curve selected 
        MOVS     R0,#+38
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  589         LCD_WR_DATA8(0x01); 
        MOVS     R0,#+1
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  590  
//  591         LCD_WR_REG(0xE0);    //Set Gamma 
        MOVS     R0,#+224
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  592         LCD_WR_DATA8(0x0F); 
        MOVS     R0,#+15
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  593         LCD_WR_DATA8(0x31); 
        MOVS     R0,#+49
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  594         LCD_WR_DATA8(0x2B); 
        MOVS     R0,#+43
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  595         LCD_WR_DATA8(0x0C); 
        MOVS     R0,#+12
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  596         LCD_WR_DATA8(0x0E); 
        MOVS     R0,#+14
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  597         LCD_WR_DATA8(0x08); 
        MOVS     R0,#+8
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  598         LCD_WR_DATA8(0x4E); 
        MOVS     R0,#+78
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  599         LCD_WR_DATA8(0xF1); 
        MOVS     R0,#+241
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  600         LCD_WR_DATA8(0x37); 
        MOVS     R0,#+55
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  601         LCD_WR_DATA8(0x07); 
        MOVS     R0,#+7
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  602         LCD_WR_DATA8(0x10); 
        MOVS     R0,#+16
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  603         LCD_WR_DATA8(0x03); 
        MOVS     R0,#+3
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  604         LCD_WR_DATA8(0x0E); 
        MOVS     R0,#+14
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  605         LCD_WR_DATA8(0x09); 
        MOVS     R0,#+9
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  606         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  607 
//  608         LCD_WR_REG(0XE1);    //Set Gamma 
        MOVS     R0,#+225
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  609         LCD_WR_DATA8(0x00); 
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  610         LCD_WR_DATA8(0x0E); 
        MOVS     R0,#+14
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  611         LCD_WR_DATA8(0x14); 
        MOVS     R0,#+20
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  612         LCD_WR_DATA8(0x03); 
        MOVS     R0,#+3
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  613         LCD_WR_DATA8(0x11); 
        MOVS     R0,#+17
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  614         LCD_WR_DATA8(0x07); 
        MOVS     R0,#+7
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  615         LCD_WR_DATA8(0x31); 
        MOVS     R0,#+49
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  616         LCD_WR_DATA8(0xC1); 
        MOVS     R0,#+193
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  617         LCD_WR_DATA8(0x48); 
        MOVS     R0,#+72
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  618         LCD_WR_DATA8(0x08); 
        MOVS     R0,#+8
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  619         LCD_WR_DATA8(0x0F); 
        MOVS     R0,#+15
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  620         LCD_WR_DATA8(0x0C); 
        MOVS     R0,#+12
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  621         LCD_WR_DATA8(0x31); 
        MOVS     R0,#+49
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  622         LCD_WR_DATA8(0x36); 
        MOVS     R0,#+54
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  623         LCD_WR_DATA8(0x0F); 
        MOVS     R0,#+15
          CFI FunCall LCD_WR_DATA8
        BL       LCD_WR_DATA8
//  624  
//  625         LCD_WR_REG(0x11);    //Exit Sleep 
        MOVS     R0,#+17
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  626         SYSDelay_ms(120);
        MOVS     R0,#+120
          CFI FunCall SYSDelay_ms
        BL       SYSDelay_ms
//  627 				
//  628         LCD_WR_REG(0x29);    //Display on 
        MOVS     R0,#+41
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  629         LCD_WR_REG(0x2c); 
        MOVS     R0,#+44
          CFI FunCall LCD_WR_REG
        BL       LCD_WR_REG
//  630 		TFT_Clear(WHITE);
        MOVW     R0,#+65535
          CFI FunCall TFT_Clear
        BL       TFT_Clear
//  631 }  
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock10
//  632 
//  633 
//  634 //ÇåÆÁº¯Êý
//  635 //color:ÒªÇåÆÁµÄÌî³äÉ«

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function TFT_Clear
        THUMB
//  636 void TFT_Clear(uint16 color)
//  637 {
TFT_Clear:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
        MOVS     R4,R0
//  638 	uint32 index=0;      
        MOVS     R5,#+0
//  639 	uint32 totalpoint=lcddev.width;
        LDR.W    R0,??DataTable12_1
        LDRH     R6,[R0, #+0]
//  640 	totalpoint*=lcddev.height; 	//µÃµ½×ÜµãÊý
        LDR.W    R0,??DataTable12_1
        LDRH     R0,[R0, #+2]
        MULS     R6,R0,R6
//  641 	LCD_SetCursor(0x00,0x0000);	//ÉèÖÃ¹â±êÎ»ÖÃ 
        MOVS     R1,#+0
        MOVS     R0,#+0
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  642 	LCD_WriteRAM_Prepare();     //¿ªÊ¼Ð´ÈëGRAM	 	  
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  643 	for(index=0;index<totalpoint;index++)
        MOVS     R0,#+0
        MOVS     R5,R0
??TFT_Clear_0:
        CMP      R5,R6
        BCS.N    ??TFT_Clear_1
//  644 	{
//  645 		LCD_WR_DATA(color);
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  646 	}
        ADDS     R5,R5,#+1
        B.N      ??TFT_Clear_0
//  647 }  
??TFT_Clear_1:
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock11
//  648 
//  649 
//  650 
//  651 //ÔÚÖ¸¶¨ÇøÓòÄÚÌî³äµ¥¸öÑÕÉ«
//  652 //(sx,sy),(ex,ey):Ìî³ä¾ØÐÎ¶Ô½Ç×ø±ê,ÇøÓò´óÐ¡Îª:(ex-sx+1)*(ey-sy+1)   
//  653 //color:ÒªÌî³äµÄÑÕÉ«

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function TFT_Fill
        THUMB
//  654 void TFT_Fill(uint16 sx,uint16 sy,uint16 ex,uint16 ey,uint16 color)
//  655 {          
TFT_Fill:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+40]
//  656 	uint16 i,j;
//  657 	uint16 xlen=0;
        MOVS     R11,#+0
//  658 	xlen=ex-sx+1;	   
        SUBS     R0,R7,R5
        ADDS     R0,R0,#+1
        MOV      R11,R0
//  659 	for(i=sy;i<=ey;i++)
        MOV      R9,R6
??TFT_Fill_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R8,R9
        BCC.N    ??TFT_Fill_1
//  660 	{									   
//  661 	 	LCD_SetCursor(sx,i);      				//ÉèÖÃ¹â±êÎ»ÖÃ 
        MOV      R1,R9
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  662 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	  
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  663 		for(j=0;j<xlen;j++)LCD_WR_DATA(color);	//ÉèÖÃ¹â±êÎ»ÖÃ 	    
        MOVS     R0,#+0
        MOV      R10,R0
??TFT_Fill_2:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R10,R11
        BCS.N    ??TFT_Fill_3
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
        ADDS     R10,R10,#+1
        B.N      ??TFT_Fill_2
//  664 	}
??TFT_Fill_3:
        ADDS     R9,R9,#+1
        B.N      ??TFT_Fill_0
//  665 }  
??TFT_Fill_1:
        POP      {R0,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock12
//  666 
//  667 //ÔÚÖ¸¶¨ÇøÓòÄÚÌî³äÖ¸¶¨ÑÕÉ«¿é			 
//  668 //(sx,sy),(ex,ey):Ìî³ä¾ØÐÎ¶Ô½Ç×ø±ê,ÇøÓò´óÐ¡Îª:(ex-sx+1)*(ey-sy+1)   
//  669 //color:ÒªÌî³äµÄÑÕÉ«

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function TFT_Color_Fill
        THUMB
//  670 void TFT_Color_Fill(uint16 sx,uint16 sy,uint16 ex,uint16 ey,uint16 *color)
//  671 {  
TFT_Color_Fill:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+40]
//  672 	uint16 height,width;
//  673 	uint16 i,j;
//  674 	width=ex-sx+1; 		//µÃµ½Ìî³äµÄ¿í¶È
        SUBS     R0,R6,R4
        ADDS     R0,R0,#+1
        STRH     R0,[SP, #+0]
//  675 	height=ey-sy+1;		//¸ß¶È
        SUBS     R0,R7,R5
        ADDS     R0,R0,#+1
        MOV      R9,R0
//  676  	for(i=0;i<height;i++)
        MOVS     R0,#+0
        MOV      R10,R0
??TFT_Color_Fill_0:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R10,R9
        BCS.N    ??TFT_Color_Fill_1
//  677 	{
//  678  		LCD_SetCursor(sx,sy+i);   	//ÉèÖÃ¹â±êÎ»ÖÃ 
        ADDS     R1,R10,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  679 		LCD_WriteRAM_Prepare();     //¿ªÊ¼Ð´ÈëGRAM
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  680 		for(j=0;j<width;j++)LCD->LCD_RAM=color[i*height+j];//Ð´ÈëÊý¾Ý 
        MOVS     R0,#+0
        MOV      R11,R0
??TFT_Color_Fill_2:
        LDRH     R0,[SP, #+0]
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R11,R0
        BCS.N    ??TFT_Color_Fill_3
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        MLA      R0,R9,R10,R11
        LDRH     R0,[R8, R0, LSL #+1]
        LDR.W    R1,??DataTable12_2  ;; 0x60080000
        STRH     R0,[R1, #+0]
        ADDS     R11,R11,#+1
        B.N      ??TFT_Color_Fill_2
//  681 	}	  
??TFT_Color_Fill_3:
        ADDS     R10,R10,#+1
        B.N      ??TFT_Color_Fill_0
//  682 }  
??TFT_Color_Fill_1:
        POP      {R0,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock13
//  683 
//  684 
//  685 //»­Ïß
//  686 //x1,y1:Æðµã×ø±ê
//  687 //x2,y2:ÖÕµã×ø±ê  

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function TFT_DrawLine
        THUMB
//  688 void TFT_DrawLine(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
//  689 {
TFT_DrawLine:
        PUSH     {R0-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+52
        SUB      SP,SP,#+12
          CFI CFA R13+64
//  690 	uint16 t; 
//  691 	int xerr=0,yerr=0,delta_x,delta_y,distance; 
        MOVS     R7,#+0
        MOVS     R8,#+0
//  692 	int incx,incy,uRow,uCol; 
//  693 	delta_x=x2-x1; //¼ÆËã×ø±êÔöÁ¿ 
        LDRH     R0,[SP, #+20]
        LDRH     R1,[SP, #+12]
        SUBS     R0,R0,R1
        MOV      R11,R0
//  694 	delta_y=y2-y1; 
        LDRH     R0,[SP, #+24]
        LDRH     R1,[SP, #+16]
        SUBS     R0,R0,R1
        MOVS     R5,R0
//  695 	uRow=x1; 
        LDRH     R0,[SP, #+12]
        MOV      R9,R0
//  696 	uCol=y1; 
        LDRH     R0,[SP, #+16]
        MOV      R10,R0
//  697 	if(delta_x>0)incx=1; //ÉèÖÃµ¥²½·½Ïò 
        CMP      R11,#+1
        BLT.N    ??TFT_DrawLine_0
        MOVS     R0,#+1
        STR      R0,[SP, #+4]
        B.N      ??TFT_DrawLine_1
//  698 	else if(delta_x==0)incx=0;//´¹Ö±Ïß 
??TFT_DrawLine_0:
        CMP      R11,#+0
        BNE.N    ??TFT_DrawLine_2
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
        B.N      ??TFT_DrawLine_1
//  699 	else {incx=-1;delta_x=-delta_x;} 
??TFT_DrawLine_2:
        MOVS     R0,#-1
        STR      R0,[SP, #+4]
        RSBS     R11,R11,#+0
//  700 	if(delta_y>0)incy=1; 
??TFT_DrawLine_1:
        CMP      R5,#+1
        BLT.N    ??TFT_DrawLine_3
        MOVS     R0,#+1
        STR      R0,[SP, #+0]
        B.N      ??TFT_DrawLine_4
//  701 	else if(delta_y==0)incy=0;//Ë®Æ½Ïß 
??TFT_DrawLine_3:
        CMP      R5,#+0
        BNE.N    ??TFT_DrawLine_5
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        B.N      ??TFT_DrawLine_4
//  702 	else{incy=-1;delta_y=-delta_y;} 
??TFT_DrawLine_5:
        MOVS     R0,#-1
        STR      R0,[SP, #+0]
        RSBS     R5,R5,#+0
//  703 	if( delta_x>delta_y)distance=delta_x; //Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá 
??TFT_DrawLine_4:
        CMP      R5,R11
        BGE.N    ??TFT_DrawLine_6
        MOV      R6,R11
        B.N      ??TFT_DrawLine_7
//  704 	else distance=delta_y; 
??TFT_DrawLine_6:
        MOVS     R6,R5
//  705 	for(t=0;t<=distance+1;t++ )//»­ÏßÊä³ö 
??TFT_DrawLine_7:
        MOVS     R0,#+0
        MOVS     R4,R0
??TFT_DrawLine_8:
        ADDS     R0,R6,#+1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R0,R4
        BLT.N    ??TFT_DrawLine_9
//  706 	{  
//  707 		LCD_DrawPoint(uRow,uCol);//»­µã 
        MOV      R1,R10
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOV      R0,R9
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  708 		xerr+=delta_x ; 
        ADDS     R7,R11,R7
//  709 		yerr+=delta_y ; 
        ADDS     R8,R5,R8
//  710 		if(xerr>distance) 
        CMP      R6,R7
        BGE.N    ??TFT_DrawLine_10
//  711 		{ 
//  712 			xerr-=distance; 
        SUBS     R7,R7,R6
//  713 			uRow+=incx; 
        LDR      R0,[SP, #+4]
        ADDS     R9,R0,R9
//  714 		} 
//  715 		if(yerr>distance) 
??TFT_DrawLine_10:
        CMP      R6,R8
        BGE.N    ??TFT_DrawLine_11
//  716 		{ 
//  717 			yerr-=distance; 
        SUBS     R8,R8,R6
//  718 			uCol+=incy; 
        LDR      R0,[SP, #+0]
        ADDS     R10,R0,R10
//  719 		} 
//  720 	}  
??TFT_DrawLine_11:
        ADDS     R4,R4,#+1
        B.N      ??TFT_DrawLine_8
//  721 }    
??TFT_DrawLine_9:
        ADD      SP,SP,#+28
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock14
//  722 
//  723 //»­¾ØÐÎ	  
//  724 //(x1,y1),(x2,y2):¾ØÐÎµÄ¶Ô½Ç×ø±ê

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function TFT_DrawRectangle
        THUMB
//  725 void TFT_DrawRectangle(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
//  726 {
TFT_DrawRectangle:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
//  727 	TFT_DrawLine(x1,y1,x2,y1);
        MOVS     R3,R5
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        MOVS     R2,R6
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall TFT_DrawLine
        BL       TFT_DrawLine
//  728 	TFT_DrawLine(x1,y1,x1,y2);
        MOVS     R3,R7
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        MOVS     R2,R4
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall TFT_DrawLine
        BL       TFT_DrawLine
//  729 	TFT_DrawLine(x1,y2,x2,y2);
        MOVS     R3,R7
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        MOVS     R2,R6
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R1,R7
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall TFT_DrawLine
        BL       TFT_DrawLine
//  730 	TFT_DrawLine(x2,y1,x2,y2);
        MOVS     R3,R7
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        MOVS     R2,R6
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall TFT_DrawLine
        BL       TFT_DrawLine
//  731 }
        POP      {R0,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock15
//  732 
//  733 //ÔÚÖ¸¶¨Î»ÖÃ»­Ò»¸öÖ¸¶¨´óÐ¡µÄÔ²
//  734 //(x,y):ÖÐÐÄµã
//  735 //r    :°ë¾¶

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function Draw_Circle
        THUMB
//  736 void Draw_Circle(uint16 x0,uint16 y0,uint8 r)
//  737 {
Draw_Circle:
        PUSH     {R3-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  738 	int a,b;
//  739 	int di;
//  740 	a=0;b=r;	  
        MOVS     R0,#+0
        MOVS     R7,R0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOV      R8,R6
//  741 	di=3-(r<<1);             //ÅÐ¶ÏÏÂ¸öµãÎ»ÖÃµÄ±êÖ¾
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSLS     R0,R6,#+1
        RSBS     R0,R0,#+3
        MOV      R9,R0
//  742 	while(a<=b)
??Draw_Circle_0:
        CMP      R8,R7
        BLT.N    ??Draw_Circle_1
//  743 	{
//  744 		LCD_DrawPoint(x0+a,y0-b);             //5
        SUBS     R1,R5,R8
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        ADDS     R0,R7,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  745  		LCD_DrawPoint(x0+b,y0-a);             //0           
        SUBS     R1,R5,R7
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        ADDS     R0,R8,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  746 		LCD_DrawPoint(x0+b,y0+a);             //4               
        ADDS     R1,R7,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        ADDS     R0,R8,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  747 		LCD_DrawPoint(x0+a,y0+b);             //6 
        ADDS     R1,R8,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        ADDS     R0,R7,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  748 		LCD_DrawPoint(x0-a,y0+b);             //1       
        ADDS     R1,R8,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        SUBS     R0,R4,R7
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  749  		LCD_DrawPoint(x0-b,y0+a);             
        ADDS     R1,R7,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        SUBS     R0,R4,R8
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  750 		LCD_DrawPoint(x0-a,y0-b);             //2             
        SUBS     R1,R5,R8
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        SUBS     R0,R4,R7
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  751   		LCD_DrawPoint(x0-b,y0-a);             //7     	         
        SUBS     R1,R5,R7
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        SUBS     R0,R4,R8
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  752 		a++;
        ADDS     R7,R7,#+1
//  753 		//Ê¹ÓÃBresenhamËã·¨»­Ô²     
//  754 		if(di<0)di +=4*a+6;	  
        CMP      R9,#+0
        BPL.N    ??Draw_Circle_2
        LSLS     R0,R7,#+2
        ADDS     R0,R0,#+6
        ADDS     R9,R0,R9
        B.N      ??Draw_Circle_0
//  755 		else
//  756 		{
//  757 			di+=10+4*(a-b);   
??Draw_Circle_2:
        SUBS     R0,R7,R8
        LSLS     R0,R0,#+2
        ADDS     R0,R0,#+10
        ADDS     R9,R0,R9
//  758 			b--;
        SUBS     R8,R8,#+1
        B.N      ??Draw_Circle_0
//  759 		} 						    
//  760 	}
//  761 } 	
??Draw_Circle_1:
        POP      {R0,R4-R9,PC}    ;; return
          CFI EndBlock cfiBlock16
//  762 
//  763 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(16*16´óÐ¡)

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function showhanzi16
        THUMB
//  764 void showhanzi16(unsigned int x,unsigned int y,unsigned char index)	
//  765 {  
showhanzi16:
        PUSH     {R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  766 	unsigned char i,j,k;
//  767 	const unsigned char *temp=hanzi16;    
        LDR.W    R10,??DataTable12_3
//  768 	temp+=index*32;	
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        ADDS     R10,R10,R6, LSL #+5
//  769 	for(j=0;j<16;j++)
        MOVS     R0,#+0
        MOV      R8,R0
??showhanzi16_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+16
        BGE.N    ??showhanzi16_1
//  770 	{
//  771 		LCD_SetCursor(x,y+j);
        MOVS     R0,R5
        UXTAB    R1,R0,R8
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  772 		LCD_WriteRAM_Prepare();	//¿ªÊ¼Ð´ÈëGRAM
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  773 		for(k=0;k<2;k++)
        MOVS     R0,#+0
        MOV      R9,R0
??showhanzi16_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+2
        BGE.N    ??showhanzi16_3
//  774 		{
//  775 			for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??showhanzi16_4:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??showhanzi16_5
//  776 			{ 		     
//  777 			 	if((*temp&(1<<i))!=0)
        LDRB     R0,[R10, #+0]
        MOVS     R1,#+1
        LSLS     R1,R1,R7
        TST      R0,R1
        BEQ.N    ??showhanzi16_6
//  778 				{
//  779 					LCD_WR_DATA(POINT_COLOR);
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
        B.N      ??showhanzi16_7
//  780 				} 
//  781 				else
//  782 				{
//  783 					LCD_WR_DATA(BACK_COLOR);
??showhanzi16_6:
        LDR.W    R0,??DataTable12_4
        LDRH     R0,[R0, #+0]
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  784 				}   
//  785 			}
??showhanzi16_7:
        ADDS     R7,R7,#+1
        B.N      ??showhanzi16_4
//  786 			temp++;
??showhanzi16_5:
        ADDS     R10,R10,#+1
//  787 		}
        ADDS     R9,R9,#+1
        B.N      ??showhanzi16_2
//  788 	 }
??showhanzi16_3:
        ADDS     R8,R8,#+1
        B.N      ??showhanzi16_0
//  789 }	
??showhanzi16_1:
        POP      {R4-R10,PC}      ;; return
          CFI EndBlock cfiBlock17
//  790 
//  791 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(32*32´óÐ¡)

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function showhanzi32
        THUMB
//  792 void showhanzi32(unsigned int x,unsigned int y,unsigned char index)	
//  793 {  
showhanzi32:
        PUSH     {R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  794 	unsigned char i,j,k;
//  795 	const unsigned char *temp=hanzi32;    
        LDR.W    R10,??DataTable12_5
//  796 	temp+=index*128;	
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+128
        MLA      R10,R0,R6,R10
//  797 	for(j=0;j<32;j++)
        MOVS     R0,#+0
        MOV      R8,R0
??showhanzi32_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+32
        BGE.N    ??showhanzi32_1
//  798 	{
//  799 		LCD_SetCursor(x,y+j);
        MOVS     R0,R5
        UXTAB    R1,R0,R8
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  800 		LCD_WriteRAM_Prepare();	//¿ªÊ¼Ð´ÈëGRAM
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  801 		for(k=0;k<4;k++)
        MOVS     R0,#+0
        MOV      R9,R0
??showhanzi32_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+4
        BGE.N    ??showhanzi32_3
//  802 		{
//  803 			for(i=0;i<8;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??showhanzi32_4:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+8
        BGE.N    ??showhanzi32_5
//  804 			{ 		     
//  805 			 	if((*temp&(1<<i))!=0)
        LDRB     R0,[R10, #+0]
        MOVS     R1,#+1
        LSLS     R1,R1,R7
        TST      R0,R1
        BEQ.N    ??showhanzi32_6
//  806 				{
//  807 					LCD_WR_DATA(POINT_COLOR);
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
        B.N      ??showhanzi32_7
//  808 				} 
//  809 				else
//  810 				{
//  811 					LCD_WR_DATA(BACK_COLOR);
??showhanzi32_6:
        LDR.W    R0,??DataTable12_4
        LDRH     R0,[R0, #+0]
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  812 				}   
//  813 			}
??showhanzi32_7:
        ADDS     R7,R7,#+1
        B.N      ??showhanzi32_4
//  814 			temp++;
??showhanzi32_5:
        ADDS     R10,R10,#+1
//  815 		}
        ADDS     R9,R9,#+1
        B.N      ??showhanzi32_2
//  816 	 }
??showhanzi32_3:
        ADDS     R8,R8,#+1
        B.N      ??showhanzi32_0
//  817 }						
??showhanzi32_1:
        POP      {R4-R10,PC}      ;; return
          CFI EndBlock cfiBlock18
//  818 
//  819 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
//  820 //x,y:ÆðÊ¼×ø±ê
//  821 //num:ÒªÏÔÊ¾µÄ×Ö·û:" "--->"~"
//  822 //size:×ÖÌå´óÐ¡ 12/16
//  823 //mode:µþ¼Ó·½Ê½(1)»¹ÊÇ·Çµþ¼Ó·½Ê½(0)

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function LCD_ShowChar
        THUMB
//  824 void LCD_ShowChar(uint16 x,uint16 y,uint8 num,uint8 size,uint8 mode)
//  825 {  							  
LCD_ShowChar:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
//  826     uint8 temp,t1,t;
//  827 	uint16 y0=y;
        STRH     R5,[SP, #+0]
//  828 	uint16 colortemp=POINT_COLOR;      			     
        LDR.W    R0,??DataTable12
        LDRH     R11,[R0, #+0]
//  829 	//ÉèÖÃ´°¿Ú		   
//  830 	num=num-' ';//µÃµ½Æ«ÒÆºóµÄÖµ
        SUBS     R6,R6,#+32
//  831 	if(!mode) //·Çµþ¼Ó·½Ê½
        LDRB     R0,[SP, #+40]
        CMP      R0,#+0
        BNE.N    ??LCD_ShowChar_0
//  832 	{
//  833 	    for(t=0;t<size;t++)
        MOVS     R0,#+0
        MOV      R10,R0
??LCD_ShowChar_1:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R10,R7
        BCS.W    ??LCD_ShowChar_2
//  834 	    {   
//  835 			if(size==12)temp=asc2_1206[num][t];  //µ÷ÓÃ1206×ÖÌå
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+12
        BNE.N    ??LCD_ShowChar_3
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+12
        LDR.W    R1,??DataTable12_6
        MLA      R0,R0,R6,R1
        LDRB     R0,[R10, R0]
        MOV      R8,R0
        B.N      ??LCD_ShowChar_4
//  836 			else temp=asc2_1608[num][t];		 //µ÷ÓÃ1608×ÖÌå 	                          
??LCD_ShowChar_3:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDR.W    R0,??DataTable12_7
        ADDS     R0,R0,R6, LSL #+4
        LDRB     R0,[R10, R0]
        MOV      R8,R0
//  837 	        for(t1=0;t1<8;t1++)
??LCD_ShowChar_4:
        MOVS     R0,#+0
        MOV      R9,R0
??LCD_ShowChar_5:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BGE.N    ??LCD_ShowChar_6
//  838 			{			    
//  839 		        if(temp&0x80)POINT_COLOR=colortemp;
        LSLS     R0,R8,#+24
        BPL.N    ??LCD_ShowChar_7
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
        B.N      ??LCD_ShowChar_8
//  840 				else POINT_COLOR=BACK_COLOR;
??LCD_ShowChar_7:
        LDR.W    R0,??DataTable12_4
        LDRH     R0,[R0, #+0]
        LDR.W    R1,??DataTable12
        STRH     R0,[R1, #+0]
//  841 				LCD_DrawPoint(x,y);	
??LCD_ShowChar_8:
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  842 				temp<<=1;
        LSLS     R8,R8,#+1
//  843 				y++;
        ADDS     R5,R5,#+1
//  844 				if(y>=lcddev.height){POINT_COLOR=colortemp;return;}//³¬ÇøÓòÁË
        LDR.W    R0,??DataTable11
        LDRH     R0,[R0, #+2]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R5,R0
        BCC.N    ??LCD_ShowChar_9
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
        B.N      ??LCD_ShowChar_10
//  845 				if((y-y0)==size)
??LCD_ShowChar_9:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDRH     R0,[SP, #+0]
        SUBS     R0,R5,R0
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R0,R7
        BNE.N    ??LCD_ShowChar_11
//  846 				{
//  847 					y=y0;
        LDRH     R0,[SP, #+0]
        MOVS     R5,R0
//  848 					x++;
        ADDS     R4,R4,#+1
//  849 					if(x>=lcddev.width){POINT_COLOR=colortemp;return;}//³¬ÇøÓòÁË
        LDR.W    R0,??DataTable11
        LDRH     R0,[R0, #+0]
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R4,R0
        BCC.N    ??LCD_ShowChar_12
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
        B.N      ??LCD_ShowChar_10
//  850 					break;
??LCD_ShowChar_12:
        B.N      ??LCD_ShowChar_6
//  851 				}
//  852 			}  	 
??LCD_ShowChar_11:
        ADDS     R9,R9,#+1
        B.N      ??LCD_ShowChar_5
//  853 	    }    
??LCD_ShowChar_6:
        ADDS     R10,R10,#+1
        B.N      ??LCD_ShowChar_1
//  854 	}else//µþ¼Ó·½Ê½
//  855 	{
//  856 	    for(t=0;t<size;t++)
??LCD_ShowChar_0:
        MOVS     R0,#+0
        MOV      R10,R0
??LCD_ShowChar_13:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R10,R7
        BCS.N    ??LCD_ShowChar_2
//  857 	    {   
//  858 			if(size==12)temp=asc2_1206[num][t];  //µ÷ÓÃ1206×ÖÌå
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+12
        BNE.N    ??LCD_ShowChar_14
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+12
        LDR.W    R1,??DataTable12_6
        MLA      R0,R0,R6,R1
        LDRB     R0,[R10, R0]
        MOV      R8,R0
        B.N      ??LCD_ShowChar_15
//  859 			else temp=asc2_1608[num][t];		 //µ÷ÓÃ1608×ÖÌå 	                          
??LCD_ShowChar_14:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDR.W    R0,??DataTable12_7
        ADDS     R0,R0,R6, LSL #+4
        LDRB     R0,[R10, R0]
        MOV      R8,R0
//  860 	        for(t1=0;t1<8;t1++)
??LCD_ShowChar_15:
        MOVS     R0,#+0
        MOV      R9,R0
??LCD_ShowChar_16:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+8
        BGE.N    ??LCD_ShowChar_17
//  861 			{			    
//  862 		        if(temp&0x80)LCD_DrawPoint(x,y); 
        LSLS     R0,R8,#+24
        BPL.N    ??LCD_ShowChar_18
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_DrawPoint
        BL       LCD_DrawPoint
//  863 				temp<<=1;
??LCD_ShowChar_18:
        LSLS     R8,R8,#+1
//  864 				y++;
        ADDS     R5,R5,#+1
//  865 				if(y>=lcddev.height){POINT_COLOR=colortemp;return;}//³¬ÇøÓòÁË
        LDR.W    R0,??DataTable11
        LDRH     R0,[R0, #+2]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R5,R0
        BCC.N    ??LCD_ShowChar_19
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
        B.N      ??LCD_ShowChar_10
//  866 				if((y-y0)==size)
??LCD_ShowChar_19:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDRH     R0,[SP, #+0]
        SUBS     R0,R5,R0
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R0,R7
        BNE.N    ??LCD_ShowChar_20
//  867 				{
//  868 					y=y0;
        LDRH     R0,[SP, #+0]
        MOVS     R5,R0
//  869 					x++;
        ADDS     R4,R4,#+1
//  870 					if(x>=lcddev.width){POINT_COLOR=colortemp;return;}//³¬ÇøÓòÁË
        LDR.W    R0,??DataTable11
        LDRH     R0,[R0, #+0]
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R4,R0
        BCC.N    ??LCD_ShowChar_21
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
        B.N      ??LCD_ShowChar_10
//  871 					break;
??LCD_ShowChar_21:
        B.N      ??LCD_ShowChar_17
//  872 				}
//  873 			}  	 
??LCD_ShowChar_20:
        ADDS     R9,R9,#+1
        B.N      ??LCD_ShowChar_16
//  874 	    }     
??LCD_ShowChar_17:
        ADDS     R10,R10,#+1
        B.N      ??LCD_ShowChar_13
//  875 	}
//  876 	POINT_COLOR=colortemp;	    	   	 	  
??LCD_ShowChar_2:
        LDR.W    R0,??DataTable12
        STRH     R11,[R0, #+0]
//  877 }   
??LCD_ShowChar_10:
        POP      {R0,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock19
//  878 
//  879 
//  880 //m^nº¯Êý
//  881 //·µ»ØÖµ:m^n´Î·½.

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function LCD_Pow
          CFI NoCalls
        THUMB
//  882 uint32 LCD_Pow(uint8 m,uint8 n)
//  883 {
LCD_Pow:
        MOVS     R2,R0
//  884 	uint32 result=1;	 
        MOVS     R0,#+1
//  885 	while(n--)result*=m;    
??LCD_Pow_0:
        MOVS     R3,R1
        SUBS     R1,R3,#+1
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+0
        BEQ.N    ??LCD_Pow_1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MULS     R0,R2,R0
        B.N      ??LCD_Pow_0
//  886 	return result;
??LCD_Pow_1:
        BX       LR               ;; return
          CFI EndBlock cfiBlock20
//  887 }			 
//  888 //ÏÔÊ¾Êý×Ö,¸ßÎ»Îª0,Ôò²»ÏÔÊ¾
//  889 //x,y :Æðµã×ø±ê	 
//  890 //len :Êý×ÖµÄÎ»Êý
//  891 //size:×ÖÌå´óÐ¡
//  892 //color:ÑÕÉ« 
//  893 //num:ÊýÖµ(0~4294967295);	 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function LCD_ShowNum
        THUMB
//  894 void LCD_ShowNum(uint16 x,uint16 y,uint32 num,uint8 len,uint8 size)
//  895 {         	
LCD_ShowNum:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOVS     R5,R0
        MOV      R11,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R4,[SP, #+40]
//  896 	uint8 t,temp;
//  897 	uint8 enshow=0;						   
        MOVS     R10,#+0
//  898 	for(t=0;t<len;t++)
        MOVS     R0,#+0
        MOV      R8,R0
??LCD_ShowNum_0:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R8,R7
        BCS.N    ??LCD_ShowNum_1
//  899 	{
//  900 		temp=(num/LCD_Pow(10,len-t-1))%10;
        SUBS     R0,R7,R8
        SUBS     R1,R0,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+10
          CFI FunCall LCD_Pow
        BL       LCD_Pow
        UDIV     R0,R6,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        MOV      R9,R0
//  901 		if(enshow==0&&t<(len-1))
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??LCD_ShowNum_2
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        SUBS     R0,R7,#+1
        CMP      R8,R0
        BGE.N    ??LCD_ShowNum_2
//  902 		{
//  903 			if(temp==0)
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+0
        BNE.N    ??LCD_ShowNum_3
//  904 			{
//  905 				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R2,#+32
        MOV      R1,R11
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MUL      R0,R8,R0
        UXTAH    R0,R0,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
//  906 				continue;
        B.N      ??LCD_ShowNum_4
//  907 			}else enshow=1; 
??LCD_ShowNum_3:
        MOVS     R0,#+1
        MOV      R10,R0
//  908 		 	 
//  909 		}
//  910 	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0); 
??LCD_ShowNum_2:
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        ADDS     R2,R9,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R11
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MUL      R0,R8,R0
        UXTAH    R0,R0,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
//  911 	}
??LCD_ShowNum_4:
        ADDS     R8,R8,#+1
        B.N      ??LCD_ShowNum_0
//  912 } 
??LCD_ShowNum_1:
        POP      {R0,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock21
//  913 
//  914 
//  915 //ÏÔÊ¾Êý×Ö,¸ßÎ»Îª0,»¹ÊÇÏÔÊ¾
//  916 //x,y:Æðµã×ø±ê
//  917 //num:ÊýÖµ(0~999999999);	 
//  918 //len:³¤¶È(¼´ÒªÏÔÊ¾µÄÎ»Êý)
//  919 //size:×ÖÌå´óÐ¡
//  920 //mode:
//  921 //[7]:0,²»Ìî³ä;1,Ìî³ä0.
//  922 //[6:1]:±£Áô
//  923 //[0]:0,·Çµþ¼ÓÏÔÊ¾;1,µþ¼ÓÏÔÊ¾.

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function LCD_ShowxNum
        THUMB
//  924 void LCD_ShowxNum(uint16 x,uint16 y,uint32 num,uint8 len,uint8 size,uint8 mode)
//  925 {  
LCD_ShowxNum:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
        SUB      SP,SP,#+12
          CFI CFA R13+48
        MOVS     R6,R0
        MOV      R11,R1
        MOVS     R7,R2
        MOV      R8,R3
        LDR      R4,[SP, #+48]
        LDR      R5,[SP, #+52]
//  926 	uint8 t,temp;
//  927 	uint8 enshow=0;						   
        MOVS     R10,#+0
//  928 	for(t=0;t<len;t++)
        MOVS     R0,#+0
        MOV      R9,R0
??LCD_ShowxNum_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R9,R8
        BCS.N    ??LCD_ShowxNum_1
//  929 	{
//  930 		temp=(num/LCD_Pow(10,len-t-1))%10;
        SUBS     R0,R8,R9
        SUBS     R1,R0,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+10
          CFI FunCall LCD_Pow
        BL       LCD_Pow
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        STRB     R0,[SP, #+4]
//  931 		if(enshow==0&&t<(len-1))
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R10,#+0
        BNE.N    ??LCD_ShowxNum_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        SUBS     R0,R8,#+1
        CMP      R9,R0
        BGE.N    ??LCD_ShowxNum_2
//  932 		{
//  933 			if(temp==0)
        LDRB     R0,[SP, #+4]
        CMP      R0,#+0
        BNE.N    ??LCD_ShowxNum_3
//  934 			{
//  935 				if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);  
        LSLS     R0,R5,#+24
        BPL.N    ??LCD_ShowxNum_4
        ANDS     R0,R5,#0x1
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R2,#+48
        MOV      R1,R11
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MUL      R0,R9,R0
        UXTAH    R0,R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
        B.N      ??LCD_ShowxNum_5
//  936 				else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);  
??LCD_ShowxNum_4:
        ANDS     R0,R5,#0x1
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R2,#+32
        MOV      R1,R11
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MUL      R0,R9,R0
        UXTAH    R0,R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
//  937  				continue;
??LCD_ShowxNum_5:
        B.N      ??LCD_ShowxNum_6
//  938 			}else enshow=1; 
??LCD_ShowxNum_3:
        MOVS     R0,#+1
        MOV      R10,R0
//  939 		 	 
//  940 		}
//  941 	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01); 
??LCD_ShowxNum_2:
        ANDS     R0,R5,#0x1
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        LDRB     R0,[SP, #+4]
        ADDS     R2,R0,#+48
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOV      R1,R11
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MUL      R0,R9,R0
        UXTAH    R0,R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
//  942 	}
??LCD_ShowxNum_6:
        ADDS     R9,R9,#+1
        B.N      ??LCD_ShowxNum_0
//  943 } 
??LCD_ShowxNum_1:
        POP      {R0-R2,R4-R11,PC}  ;; return
          CFI EndBlock cfiBlock22
//  944 
//  945 
//  946 //ÏÔÊ¾×Ö·û´®
//  947 //x,y:Æðµã×ø±ê
//  948 //width,height:ÇøÓò´óÐ¡  
//  949 //size:×ÖÌå´óÐ¡
//  950 //*p:×Ö·û´®ÆðÊ¼µØÖ·		  

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function LCD_ShowString
        THUMB
//  951 void LCD_ShowString(uint16 x,uint16 y,uint16 width,uint16 height,uint8 size,uint8 *p)
//  952 {         
LCD_ShowString:
        PUSH     {R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+32
        SUB      SP,SP,#+8
          CFI CFA R13+40
        MOVS     R5,R0
        MOVS     R6,R1
        MOV      R9,R2
        MOV      R10,R3
        LDR      R4,[SP, #+40]
        LDR      R7,[SP, #+44]
//  953 	uint8 x0=x;
        MOV      R8,R5
//  954 	width+=x;
        ADDS     R9,R5,R9
//  955 	height+=y;
        ADDS     R10,R6,R10
//  956     while((*p<='~')&&(*p>=' '))//ÅÐ¶ÏÊÇ²»ÊÇ·Ç·¨×Ö·û!
??LCD_ShowString_0:
        LDRB     R0,[R7, #+0]
        CMP      R0,#+127
        BGE.N    ??LCD_ShowString_1
        LDRB     R0,[R7, #+0]
        CMP      R0,#+32
        BLT.N    ??LCD_ShowString_1
//  957     {       
//  958         if(x>=width){x=x0;y+=size;}
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        CMP      R5,R9
        BCC.N    ??LCD_ShowString_2
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOV      R5,R8
        UXTAB    R6,R6,R4
//  959         if(y>=height)break;//ÍË³ö
??LCD_ShowString_2:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        CMP      R6,R10
        BCS.N    ??LCD_ShowString_1
//  960         LCD_ShowChar(x,y,*p,size,1);
??LCD_ShowString_3:
        MOVS     R0,#+1
        STR      R0,[SP, #+0]
        MOVS     R3,R4
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        LDRB     R2,[R7, #+0]
        MOVS     R1,R6
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_ShowChar
        BL       LCD_ShowChar
//  961         x+=size/2;
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+2
        SDIV     R0,R4,R0
        ADDS     R5,R0,R5
//  962         p++;
        ADDS     R7,R7,#+1
        B.N      ??LCD_ShowString_0
//  963     }  
//  964 }
??LCD_ShowString_1:
        POP      {R0,R1,R4-R10,PC}  ;; return
          CFI EndBlock cfiBlock23
//  965 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function showimage
        THUMB
//  966 void showimage(uint16 x,uint16 y) //ÏÔÊ¾40*40Í¼Æ¬
//  967 {  
showimage:
        PUSH     {R3-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
//  968 	uint16 i,j,k;
//  969 	uint16 da;
//  970 	k=0;
        MOVS     R0,#+0
        MOV      R8,R0
//  971 	for(i=0;i<40;i++)
        MOVS     R0,#+0
        MOVS     R6,R0
??showimage_0:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+40
        BGE.N    ??showimage_1
//  972 	{	
//  973 		LCD_SetCursor(x,y+i);
        ADDS     R1,R6,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  974 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  975 		for(j=0;j<40;j++)
        MOVS     R0,#+0
        MOVS     R7,R0
??showimage_2:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        CMP      R7,#+40
        BGE.N    ??showimage_3
//  976 		{
//  977 			da=qqimage[k*2+1];
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.N    R0,??DataTable12_8
        ADDS     R0,R0,R8, LSL #+1
        LDRB     R0,[R0, #+1]
        MOV      R9,R0
//  978 			da<<=8;
        LSLS     R9,R9,#+8
//  979 			da|=qqimage[k*2]; 
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDR.N    R0,??DataTable12_8
        LDRB     R0,[R0, R8, LSL #+1]
        ORRS     R9,R0,R9
//  980 			LCD_WR_DATA(da);					
        MOV      R0,R9
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  981 			k++;  			
        ADDS     R8,R8,#+1
//  982 		}
        ADDS     R7,R7,#+1
        B.N      ??showimage_2
//  983 	}
??showimage_3:
        ADDS     R6,R6,#+1
        B.N      ??showimage_0
//  984 }
??showimage_1:
        POP      {R0,R4-R9,PC}    ;; return
          CFI EndBlock cfiBlock24
//  985 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function show_image
        THUMB
//  986 void show_image(uint16 x,uint16 y,uint16 hang,uint16 lie,uint8  date1[X_MAX+6][Y_MAX+15])
//  987  {
show_image:
        PUSH     {R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+32]
//  988      uint16 i,j;
//  989      for(i=0;i<hang;i++)
        MOVS     R0,#+0
        MOV      R9,R0
??show_image_0:
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R9,R6
        BCS.N    ??show_image_1
//  990      {	
//  991 		LCD_SetCursor(x,y+i);
        ADDS     R1,R9,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
//  992 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
//  993 		for(j=0;j<lie;j++)
        MOVS     R0,#+0
        MOV      R10,R0
??show_image_2:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        CMP      R10,R7
        BCS.N    ??show_image_3
//  994 		{
//  995             if(date1[X_MAX-i-1][Y_MAX-j-1]>160)
        MOVW     R0,#+34859
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        RSBS     R1,R10,#+0
        UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
        RSBS     R2,R9,#+0
        MOVS     R3,#+225
        MLA      R2,R3,R2,R8
        ADDS     R1,R1,R2
        LDRB     R0,[R0, R1]
        CMP      R0,#+161
        BLT.N    ??show_image_4
//  996                 LCD_WR_DATA(0xffff);
        MOVW     R0,#+65535
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
        B.N      ??show_image_5
//  997             else LCD_WR_DATA(0);
??show_image_4:
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
//  998 		}
??show_image_5:
        ADDS     R10,R10,#+1
        B.N      ??show_image_2
//  999 	}    
??show_image_3:
        ADDS     R9,R9,#+1
        B.N      ??show_image_0
// 1000  }
??show_image_1:
        POP      {R4-R10,PC}      ;; return
          CFI EndBlock cfiBlock25
// 1001 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function show_real_pic
        THUMB
// 1002 void show_real_pic(uint16 x,uint16 y,uint16 hang,uint16 lie,uint8  date1[X_MAX+6][Y_MAX+15])
// 1003  {
show_real_pic:
        PUSH     {R0,R1,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+44
        SUB      SP,SP,#+4
          CFI CFA R13+48
        MOV      R11,R2
        MOVS     R4,R3
        LDR      R5,[SP, #+48]
// 1004      uint16 i,j;
// 1005      uint8 Redc,Greenc,Bluec;
// 1006      for(i=0;i<hang;i++)
        MOVS     R0,#+0
        MOVS     R6,R0
??show_real_pic_0:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R6,R11
        BCS.N    ??show_real_pic_1
// 1007      {	
// 1008 		LCD_SetCursor(x,y+i);
        LDRH     R0,[SP, #+8]
        ADDS     R1,R6,R0
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        LDRH     R0,[SP, #+4]
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1009 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1010 		for(j=0;j<lie;j++)
        MOVS     R0,#+0
        MOVS     R7,R0
??show_real_pic_2:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R7,R4
        BCS.N    ??show_real_pic_3
// 1011 		{
// 1012 		    Redc = date1[X_MAX-i-1][Y_MAX-j-1]*0.121;
        MOVW     R0,#+34859
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        RSBS     R1,R7,#+0
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        RSBS     R2,R6,#+0
        MOVS     R3,#+225
        MLA      R2,R3,R2,R5
        ADDS     R1,R1,R2
        LDRB     R0,[R0, R1]
          CFI FunCall __aeabi_ui2d
        BL       __aeabi_ui2d
        LDR.N    R2,??DataTable12_9  ;; 0x22d0e560
        LDR.N    R3,??DataTable12_10  ;; 0x3fbef9db
          CFI FunCall __aeabi_dmul
        BL       __aeabi_dmul
          CFI FunCall __aeabi_d2iz
        BL       __aeabi_d2iz
        MOV      R10,R0
// 1013 			Bluec = date1[X_MAX-i-1][Y_MAX-j-1]*0.121;
        MOVW     R0,#+34859
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        RSBS     R1,R7,#+0
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        RSBS     R2,R6,#+0
        MOVS     R3,#+225
        MLA      R2,R3,R2,R5
        ADDS     R1,R1,R2
        LDRB     R0,[R0, R1]
          CFI FunCall __aeabi_ui2d
        BL       __aeabi_ui2d
        LDR.N    R2,??DataTable12_9  ;; 0x22d0e560
        LDR.N    R3,??DataTable12_10  ;; 0x3fbef9db
          CFI FunCall __aeabi_dmul
        BL       __aeabi_dmul
          CFI FunCall __aeabi_d2iz
        BL       __aeabi_d2iz
        MOV      R8,R0
// 1014 			Greenc = date1[X_MAX-i-1][Y_MAX-j-1]*0.246;
        MOVW     R0,#+34859
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        RSBS     R1,R7,#+0
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        RSBS     R2,R6,#+0
        MOVS     R3,#+225
        MLA      R2,R3,R2,R5
        ADDS     R1,R1,R2
        LDRB     R0,[R0, R1]
          CFI FunCall __aeabi_ui2d
        BL       __aeabi_ui2d
        LDR.N    R2,??DataTable12_11  ;; 0x916872b0
        LDR.N    R3,??DataTable12_12  ;; 0x3fcf7ced
          CFI FunCall __aeabi_dmul
        BL       __aeabi_dmul
          CFI FunCall __aeabi_d2iz
        BL       __aeabi_d2iz
        MOV      R9,R0
// 1015 			LCD_WR_DATA((Redc<<11) | (Greenc<<5) | Bluec);
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LSLS     R0,R9,#+5
        ORRS     R0,R0,R10, LSL #+11
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        ORRS     R0,R8,R0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1016 		}
        ADDS     R7,R7,#+1
        B.N      ??show_real_pic_2
// 1017 	}   
??show_real_pic_3:
        ADDS     R6,R6,#+1
        B.N      ??show_real_pic_0
// 1018  }
??show_real_pic_1:
        POP      {R0-R2,R4-R11,PC}  ;; return
          CFI EndBlock cfiBlock26
// 1019 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function show_2image
        THUMB
// 1020 void show_2image()
// 1021  {
show_2image:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
// 1022      uint32 i,j,x=0,y=0;
        MOVS     R6,#+0
        MOVS     R7,#+0
// 1023      for(i=0;i<223;i++)
        MOVS     R0,#+0
        MOVS     R4,R0
??show_2image_0:
        CMP      R4,#+223
        BCS.N    ??show_2image_1
// 1024      {	
// 1025 		LCD_SetCursor(x,y+i);
        ADDS     R1,R4,R7
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1026 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1027 		for(j=0;j<300;j++)
        MOVS     R0,#+0
        MOVS     R5,R0
??show_2image_2:
        CMP      R5,#+300
        BCS.N    ??show_2image_3
// 1028 		{
// 1029             if(Get_Transform_Value(i,j)>threshold)
        MOVS     R1,R5
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,R4
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall Get_Transform_Value
        BL       Get_Transform_Value
        LDR.N    R1,??DataTable12_13
        LDRH     R1,[R1, #+0]
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R1,R0
        BCS.N    ??show_2image_4
// 1030                 LCD_WR_DATA(0xffff);
        MOVW     R0,#+65535
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
        B.N      ??show_2image_5
// 1031             else LCD_WR_DATA(0);
??show_2image_4:
        MOVS     R0,#+0
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1032 		}
??show_2image_5:
        ADDS     R5,R5,#+1
        B.N      ??show_2image_2
// 1033 	}    
??show_2image_3:
        ADDS     R4,R4,#+1
        B.N      ??show_2image_0
// 1034  }
??show_2image_1:
        POP      {R0,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock27

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC32     lcddev

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function clear_image
        THUMB
// 1035 void clear_image()
// 1036  {
clear_image:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
// 1037      uint16 i,j;
// 1038      for(i=0;i<248;i++)
        MOVS     R0,#+0
        MOVS     R4,R0
??clear_image_0:
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R4,#+248
        BGE.N    ??clear_image_1
// 1039      {	
// 1040 		LCD_SetCursor(0,0+i);
        MOVS     R1,R4
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+0
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1041 		LCD_WriteRAM_Prepare();     			//¿ªÊ¼Ð´ÈëGRAM	
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1042 		for(j=0;j<355;j++)
        MOVS     R0,#+0
        MOVS     R5,R0
??clear_image_2:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R5,#+354
        BGT.N    ??clear_image_3
// 1043 		{
// 1044             LCD_WR_DATA(0xffff);
        MOVW     R0,#+65535
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1045 		}
        ADDS     R5,R5,#+1
        B.N      ??clear_image_2
// 1046 	}    
??clear_image_3:
        ADDS     R4,R4,#+1
        B.N      ??clear_image_0
// 1047  }
??clear_image_1:
        POP      {R0,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock28

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function show_dot
        THUMB
// 1048 void show_dot(uint16 T[500][2],uint16 line_Num,uint16 line_color)
// 1049  {
show_dot:
        PUSH     {R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1050      uint16 i,j;
// 1051      for(j=0;j<3;j++)
        MOVS     R0,#+0
        MOV      R8,R0
??show_dot_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+3
        BGE.N    ??show_dot_1
// 1052       {
// 1053           for(i=0;i<line_Num;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??show_dot_2:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R7,R5
        BCS.N    ??show_dot_3
// 1054            {
// 1055                LCD_SetCursor(Y_MAX-1-T[i][1],X_MAX-1-T[i][0]+j-1);      				//ÉèÖÃ¹â±êÎ»ÖÃ 
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRH     R0,[R4, R7, LSL #+2]
        RSBS     R0,R0,#+0
        ADDS     R0,R8,R0
        ADDS     R1,R0,#+153
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        ADDS     R0,R4,R7, LSL #+2
        LDRH     R0,[R0, #+2]
        RSBS     R0,R0,#+209
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1056                LCD_WriteRAM_Prepare(); 
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1057                LCD_WR_DATA(line_color);
        MOVS     R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1058            }
        ADDS     R7,R7,#+1
        B.N      ??show_dot_2
// 1059       }
??show_dot_3:
        ADDS     R8,R8,#+1
        B.N      ??show_dot_0
// 1060  }
??show_dot_1:
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock29
// 1061 extern uint16  RST1[X_MAX * Y_MAX];
// 1062 extern uint16 RST0[X_MAX * Y_MAX]; 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function show_dot_change
        THUMB
// 1063 void show_dot_change(uint16 T[500][2], uint16 line_Num, uint16 line_color)
// 1064 {
show_dot_change:
        PUSH     {R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1065 	uint16 i, j;
// 1066 	for (j = 0; j<3; j++)
        MOVS     R0,#+0
        MOV      R8,R0
??show_dot_change_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+3
        BGE.N    ??show_dot_change_1
// 1067 	{
// 1068 		for (i = 0; i<line_Num; i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??show_dot_change_2:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R7,R5
        BCS.N    ??show_dot_change_3
// 1069 		{
// 1070 			LCD_SetCursor(Y_MAX_OUT - 1 - RST1[T[i][0] * Y_MAX + T[i][1]], X_MAX_OUT - 1 - RST0[T[i][0] * Y_MAX + T[i][1]] + j - 1);      				//ÉèÖÃ¹â±êÎ»ÖÃ 
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRH     R0,[R4, R7, LSL #+2]
        MOVS     R1,#+210
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        ADDS     R2,R4,R7, LSL #+2
        LDRH     R2,[R2, #+2]
        MLA      R0,R1,R0,R2
        LDR.N    R1,??DataTable12_14
        LDRH     R0,[R1, R0, LSL #+1]
        RSBS     R0,R0,#+0
        ADDS     R0,R8,R0
        ADDS     R1,R0,#+233
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVW     R0,#+299
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRH     R2,[R4, R7, LSL #+2]
        MOVS     R3,#+210
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        ADDS     R12,R4,R7, LSL #+2
        LDRH     R12,[R12, #+2]
        MLA      R2,R3,R2,R12
        LDR.N    R3,??DataTable12_15
        LDRH     R2,[R3, R2, LSL #+1]
        SUBS     R0,R0,R2
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1071 			LCD_WriteRAM_Prepare();
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1072 			LCD_WR_DATA(line_color);
        MOVS     R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1073 		}
        ADDS     R7,R7,#+1
        B.N      ??show_dot_change_2
// 1074 	}
??show_dot_change_3:
        ADDS     R8,R8,#+1
        B.N      ??show_dot_change_0
// 1075 }
??show_dot_change_1:
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock30

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DC32     POINT_COLOR

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DC32     lcddev

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DC32     0x60080000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DC32     hanzi16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DC32     BACK_COLOR

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DC32     hanzi32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_6:
        DC32     asc2_1206

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_7:
        DC32     asc2_1608

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_8:
        DC32     qqimage

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_9:
        DC32     0x22d0e560

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_10:
        DC32     0x3fbef9db

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_11:
        DC32     0x916872b0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_12:
        DC32     0x3fcf7ced

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_13:
        DC32     threshold

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_14:
        DC32     RST0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_15:
        DC32     RST1
// 1076 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function show_dot_change2
        THUMB
// 1077 void show_dot_change2(uint16 T[500][2], uint16 line_Num, uint16 line_color)
// 1078 {
show_dot_change2:
        PUSH     {R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1079 	uint16 i, j;
// 1080 	for (j = 0; j<3; j++)
        MOVS     R0,#+0
        MOV      R8,R0
??show_dot_change2_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+3
        BGE.N    ??show_dot_change2_1
// 1081 	{
// 1082 		for (i = 0; i<line_Num; i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??show_dot_change2_2:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R7,R5
        BCS.N    ??show_dot_change2_3
// 1083 		{
// 1084 			LCD_SetCursor(Y_MAX_OUT - 1 - T[i][1], X_MAX_OUT - 1 - T[i][0] + j - 1);      				//ÉèÖÃ¹â±êÎ»ÖÃ 
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRH     R0,[R4, R7, LSL #+2]
        RSBS     R0,R0,#+0
        ADDS     R0,R8,R0
        ADDS     R1,R0,#+233
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVW     R0,#+299
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        ADDS     R2,R4,R7, LSL #+2
        LDRH     R2,[R2, #+2]
        SUBS     R0,R0,R2
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_SetCursor
        BL       LCD_SetCursor
// 1085 			LCD_WriteRAM_Prepare();
          CFI FunCall LCD_WriteRAM_Prepare
        BL       LCD_WriteRAM_Prepare
// 1086 			LCD_WR_DATA(line_color);
        MOVS     R0,R6
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
          CFI FunCall LCD_WR_DATA
        BL       LCD_WR_DATA
// 1087 		}
        ADDS     R7,R7,#+1
        B.N      ??show_dot_change2_2
// 1088 	}
??show_dot_change2_3:
        ADDS     R8,R8,#+1
        B.N      ??show_dot_change2_0
// 1089 }
??show_dot_change2_1:
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock31

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1090 
// 
//    14 bytes in section .bss
//     2 bytes in section .data
// 6 436 bytes in section .rodata
// 3 990 bytes in section .text
// 
// 3 990 bytes of CODE  memory
// 6 436 bytes of CONST memory
//    16 bytes of DATA  memory
//
//Errors: none
//Warnings: 3
