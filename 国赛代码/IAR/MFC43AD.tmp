#include "all.h"
#if 1
//定义行列数
uint8 sensor[8];
uint32 speed_start=0,speed_end=150000000;
int16  i=0,j=0,k=0,image_n=0,t=0,read_da1;
uint16 n=0;
uint8 flag_photo=0,start_encode=0;
float sum_error,middle_output=0;


void main()
 {
     
     SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
     DisableInterrupts
         //VSYNC中断
     GPIO_INIT(VSYNC_PORT,VSYNC_PIN,INPUT);
     GPIOPULL_SET(VSYNC_PORT,VSYNC_PIN,PULL_UP);
     Enable_IRQ(INT_PORTC);
     GPIOINT_Enable(VSYNC_PORT,VSYNC_PIN,LEVEL_RISING);
     //HREF中断
     GPIO_INIT(HREF_PORT,HREF_PIN,INPUT);
     GPIOPULL_SET(HREF_PORT,HREF_PIN,LEVEL_RISING);
     //PCLK中断
     GPIO_INIT(PCLK_PORT,PCKL_PIN,INPUT);
     GPIOPULL_SET(PCLK_PORT,PCKL_PIN,PULL_DOWN);
     GPIOINT_Enable(PCLK_PORT,PCKL_PIN,DMA_RISING);
     
     //DMA初始化
     DMA_Init_new(DMAMUX0, DMA_CH0,Src_PORTC,Y_MAX+15,1,DMA_Normal_Mode);
     DMA_Source_new(DMA_CH0, 0X400FF0D0,0, DMA_8BIT, 0);
     DMA_Destination_new(DMA_CH0, date,1, DMA_8BIT, 0);
     //DMA_Int_Enable(DMA_CH0,DMA_MAJOR);
     //设置输入端口
     GPIO_INIT(PORTD,0,INPUT);
     GPIO_INIT(PORTD,1,INPUT);
     GPIO_INIT(PORTD,2,INPUT);
     GPIO_INIT(PORTD,3,INPUT);
     GPIO_INIT(PORTD,4,INPUT);
     GPIO_INIT(PORTD,5,INPUT);
     GPIO_INIT(PORTD,6,INPUT);
     GPIO_INIT(PORTD,7,INPUT);
     GPIOPULL_SET(PORTD,0,PULL_DOWN);
     GPIOPULL_SET(PORTD,1,PULL_DOWN);
     GPIOPULL_SET(PORTD,2,PULL_DOWN);
     GPIOPULL_SET(PORTD,3,PULL_DOWN);
     GPIOPULL_SET(PORTD,4,PULL_DOWN);
     GPIOPULL_SET(PORTD,5,PULL_DOWN);
     GPIOPULL_SET(PORTD,6,PULL_DOWN);
     GPIOPULL_SET(PORTD,7,PULL_DOWN);
     
     //UART
     GPIOType_UART(PORTB_16_17);
     UART_INIT(UART0,75000,115200);
     UART_FIFO_read_init(UART0);
     Enable_IRQ(61);
     UARTINT_Enable(UART0,RIE);
     //SCCB_INIT
     SCCB_init();
     //SCCB_Catch();
    MT34_init();   
     servo_driver_init();
     
     //电机初始化
     motor_PWM_init();
     //SD初始化
    SD_Init();
    //PIT
    PIT_CLOCK_Enable
    PIT_INIT(PIT0,15000000,DEBUG_STOP);
  
    Enable_IRQ(INT_PIT0);
    PITINT_Enable(PIT0);
   
     //优先级设置
     SET_IRQ_PRIOR(INT_PORTC,0);
     SET_IRQ_PRIOR(61,5);
     //LED初始化
     led_init();
     //OLED
     LCD_Init();
     OLED_init();
     //TFT初始化
     GPIO_INIT(RST_PORT,RST_PIN,1);
     GPIO_INIT(DC_PORT,DC_PIN,1);
     GPIOType_SPI(SPI0,SPI0_PCS0_PTA14,SPI0_SCK_PTA15,SPI0_SOUT_PTA16,SPI0_SIN_PTA17);
     SPI_init(SPI0,MASTER);
     TFT_Init();
     LCD_ShowString(200,10,30,30,16,"PID:");
     LCD_ShowString(200,25,30,30,16,"P=");
     LCD_ShowString(200,40,30,30,16,"I=");
     LCD_ShowString(200,55,30,30,16,"D=");
     LCD_ShowString(200,70,30,30,16,"K=");
     //key_init
     Key_init();
     Switch_init();
     GPIOPULL_SET(PORTC,3,PULL_DOWN);
     float frequence=0,control_k;
      IR_INIT();
    
     //driver=350;
      uint8 buff[512] = {0x5A};
      uint8 buff2[512] = {0};
      //正交解码
      QD_init_FTM();
      power_test_init();
     BTN_current_init();
     EnableInterrupts
     uint8 tft_flag=3;   
     float pwm_add[5]={0};
     uint8 sour_i,sour_j,key_num=0;
     while(1)
      {
          if((key_num=Key_get())!=0)  key_run(key_num);
          //BTN_value();
          //if(!power_value()) {  LED_ON(led1,led_on);SYSDelay_ms(200);LED_ON(led1,led_off);SYSDelay_ms(200);}
          if((IR_GET()==1))
           {
               if(start_run==1)
                {
                    driver=0;
                    close_motor=1;
                }
               LED_ON(led1,led_on);
           }
          else 
           {
               LED_ON(led1,led_off);
           }
          if(flag_photo)
           {
               flag_photo=0;
               ecode_get(&count_pwm1,&count_pwm2);
               send_line_other(UART0,1,count_pwm1);
              send_line_other(UART0,2,count_pwm2);
              //display(13,7,count_pwm1);
              // display(3,7,count_pwm2);
               if((mulu==0)&&(start_run==0)) OLED_image();
               CAM_get();//图像处理以及中线提取，外部变量
               //send_line_other(UART0,2,k_output);
                    
               //TakePhoto();
               LED_ON(led0,led_on);
               if(Switch_get(0)==0) 
                { 
                    tft_flag=3;
                    show_all_TFT(tft_flag);
                    
                }
               if(Switch_get(1)==0) 
                {
                    tft_flag=2;
                    show_all_TFT(tft_flag);
                }
                 desier_get(0.2,sub_a,sub_k);//获得理想差速之后 的速度
               middle_output=middle_PID_control(middle_p,0,5);
               control_k=PID_control_k(k_p,0,0);k_p=k_ptemp;
               pwm_add[0]=pwm_add[1];
               pwm_add[1]=pwm_add[2];
               pwm_add[2]=500-control_k-middle_output;
              if(Switch_get(2)==0) 
              {
                  servo_set(pwm_add[2]*0.8+pwm_add[1]*0.1+pwm_add[0]*0.1);
              }
              if((start_run==1))
                {
                    servo_set(pwm_add[2]*0.8+pwm_add[1]*0.1+pwm_add[0]*0.1);
                   PID_speed(speed_p,speed_i,0,speed_p,speed_i,0);//根据期望速度PID控制
                }
                   i=0;j=0;
                   GPIOINT_Clear(PORTC);
                   Enable_IRQ(INT_PORTC);
                   GPIOINT_Enable(VSYNC_PORT,VSYNC_PIN,LEVEL_RISING);
                   EnableInterrupts
                
           }
      }
 }

void PORTC_IRQHandler(void)
 {
     uint32 port_date=PORTC_ISFR;
     if(port_date&0X8000)
      {
          PORTC_ISFR|=0X8000;
#if 0//隔行扫描
          if((i%2==0)&&(i>=4))
           {
               DMA_Enable_new(DMAMUX0,DMA_CH0);
               if(i>=X_MAX*2+1)
                {
                    flag_photo=1;
                    start_encode=0;
                    Disable_IRQ(INT_PORTC);
                    DisableInterrupts;
                    GPIOINT_Disable(HREF_PORT,HREF_PIN);
                    DMA_Disable_new(DMAMUX0,DMA_CH0);
                    DMA_SetDestAddress(DMA_CH0, date);       
                }
           }
#endif
#if 1  //逐行扫描
          if(i>=1)
          DMA_Enable_new(DMAMUX0,DMA_CH0);
#endif
          if(i>=X_MAX+4)
           {
               flag_photo=1;
               Disable_IRQ(INT_PORTC);
               DisableInterrupts;
               GPIOINT_Disable(HREF_PORT,HREF_PIN);
               DMA_Disable_new(DMAMUX0,DMA_CH0);
               DMA_SetDestAddress(DMA_CH0, date);   
           }
          i++;
      }
     if(port_date&0X20000)
      {
          PORTC_ISFR|=0X20000;
          start_encode=1;
          image_n++;
          GPIOINT_Disable(VSYNC_PORT,VSYNC_PIN);
          GPIOINT_Enable(HREF_PORT,HREF_PIN,LEVEL_RISING);
      }
 }
void DMA0_DMA16_IRQHandler(void)
 {
     DMA_Clear_Int(DMA_CH0);
 }
void PIT0_IRQHandler(void)
 {
     PITINT_Clear(PIT0);
     image_n=0;
     n++;
     if(n>=run_time)
      {
          n=0;
         driver=0;
         close_motor=1;
      }
 }
void UART0_RX_TX_IRQHandler(void)
 {
     uint8 dateddd[8];
     float ddddddd;
     DisableInterrupts
     UART_FIFO_Read_value(UART0,dateddd);
     P1_I1_D1_change(&speed_p,&speed_i,&ddddddd,dateddd);
     P2_I2_D2_change(&driver,&ddddddd,&ddddddd,dateddd);
     EnableInterrupts
 }
#endif
