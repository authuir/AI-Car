#include"all.h"
/*************************  Input Capture的变量 ****************************/
//没函数发生器,所以还没测试10Hz以下的,2MHz以上的.10Kz到2MHz的精度达到99%
//连接B0,C2.既可测试,B0作为PWM输出,C2捕捉
uint32  current=0, original=0,Freq[10],tick = 0,Frequency;
uint32 FTM_TimerOut_flag = 0,QuTou_QuWei_NUM = 4;
uint32 busclk = 75000000;
uint32 Fre_Frequece_Index=0;                     //用于统计序列
/****************************************************************************/
uint32 average(uint32 p[10]) //功能：去毛刺求平均值
{
	int i = 0,j = 0;
	uint32 sum = 0, temp = 0;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10 - i; j++) {
			if (p[j] > p[j + 1]) {
				temp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = temp;
			}
		}
	}
	for (i = QuTou_QuWei_NUM; i < (10 - QuTou_QuWei_NUM);i++) 
		sum = sum + p[i];
	return sum / (10 - 2*QuTou_QuWei_NUM);
}

//the maximum frequency for the channel input signal to be
//detected correctly is system clock divided by 4,
void FTM0_IRQHandler()
{
    //FTM0_SC &= ~FTM_SC_TOF_MASK;	  //清除溢出中断标志位
    FTM_Clear_Channal_Event(FTM0, FTM_CH1);
current = FTM0_C1V;
// 当两次中断之间的时间差超过了一个计数周期时，需要补加FTM_CountOut_flag个0xFFFF值
    if(FTM_TimerOut_flag >= 1)
    {   
    	tick = (0xFFFF - original + (FTM_TimerOut_flag-1)*0xFFFF + current);
    	FTM_TimerOut_flag = 0;
}
// 若两次中断的响应在一个周期内，则直接用前一次的计数器值减去后一次计数器值
    else
    	tick =(current-original);   	
    Freq[Fre_Frequece_Index] = busclk / tick;
    Fre_Frequece_Index++;
    if(Fre_Frequece_Index >= 10)
    {	
      Frequency = average(Freq);
      Fre_Frequece_Index = 0;
    }
    original=current;
}
void main(void)
{
    SYS_CLOCK_SET(SYS_CLOCK_150M, 1, 2, 3, 6);
FTM_PWM_Init(EPWM_MODE, FTM1_CH0_PTB0, 10000, 0.5);
FTM_IC_Init(FTM0_CH1_PTC2, FTM_Falling);
    FTM_Ch_Int_Enable(FTM0, FTM_CH1);
	while(1)
	{
		if(FTM0_SC & FTM_SC_TOF_MASK)
		{
			FTM0_SC &= ~FTM_SC_TOF_MASK;
			FTM_TimerOut_flag++;
		}
	}
}
