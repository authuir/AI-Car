//软件触发
#include "all.h"
uint32 i=0,j=0,result=0;
int  VALUE=0;
uint32 frequence=0;
void delay(uint32 n)
  {
      int x,y;
      for(x=0;x<n;x++)
        for(y=110;y>0;y--);
  }
void main(void)
{
    SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
    PORT_Enable_ALL();
    ADC_Enable(ADC3);
    ADCINIT_A(ADC3,AD9,bit_16);
    while(1)
     {
         while(!ADC_S_A(ADC3));
         ADC_VALUE_A(ADC3,&VALUE);
         result=VALUE*3300/65536;
     }
}
//硬件触发：
#include "all.h"
uint32 i=0,j=0,result=0;
int  VALUE=0;
uint32 frequence=0;
void delay(uint32 n)
  {
      int x,y;
      for(x=0;x<n;x++)
        for(y=110;y>0;y--);
  }
void main(void)
{
    SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
    PIT_CLOCK_Enable
    PIT_INIT(PIT0,SYS_CLOCK/100,DEBUG_CONTINUE);
    PORT_Enable_ALL();
    ADC_Enable(ADC0);
    ADCHardWare_INIT(ADC0,Alternate_Trigger,Pre_A,PIT0_Trigger);
    ADCINIT_A(ADC0,DADP0,bit_16);
    HardWare_configure(ADC0,Trigger_always,Sample_8);
    PIT_Enable(PIT0);
    while(1)
     {
         while(!ADC_S_A(ADC0));
         ADC_VALUE_A(ADC0,&VALUE);
         result=VALUE*3300/65536;
     }
}

差分：
#include "all.h"
int32 i=0,j=0,result1=0,result2=0;
int  VALUE=0;
void delay(uint32 n)
  {
      int x,y;
      for(x=0;x<n;x++)
        for(y=110;y>0;y--);
  }
void main(void)
{
    SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
    PORT_Enable_ALL();
    ADC_Enable(ADC0);
    ADC_DIFF_A(ADC0,DAD0,bite_16);
    HWREG(ADC_CFG1_BASE +ADC0*(0X1000))|=ADC_CFG1_ADIV(3)|ADC_CFG1_ADICLK(0);
    while(1)
     {
         while(!ADC_S_A(ADC0));
         ADC_VALUE_A(ADC0,&VALUE);
         result1=2*VALUE*3300/65536;
         result2=VALUE*3300/65536/2;
     }
}



寄存器操作AD采样
#include "all.h"
uint16 value,result;
void main()
 {
     SYS_CLOCK_SET(SYS_CLOCK_150M,1,2,3,6);
     PIT_CLOCK_Enable
     PIT_INIT(PIT0,600000,DEBUG_STOP);//4.5ms
      PIT_Enable(PIT0);
     SIM_SCGC6|=SIM_SCGC6_ADC0_MASK;*
     SIM_SOPT7|=SIM_SOPT7_ADC0ALTTRGEN_MASK*
                |SIM_SOPT7_ADC0TRGSEL(4);*
     //ADC0_SC1A&=~ADC_SC1_ADCH_MASK;*
     ADC0_CFG1|=ADC_CFG1_ADIV(3)|ADC_CFG1_ADLSMP_MASK
                |ADC_CFG1_MODE(1)|ADC_CFG1_ADICLK(2);
     //ADC0_CFG2|=ADC_CFG2_MUXSEL_MASK|ADC_CFG2_ADLSTS(0);
     //ADC0_SC2|=ADC_SC2_ADTRG_MASK;*
     //ADC0_SC3|=ADC_SC3_ADCO_MASK|ADC_SC3_AVGE_MASK
     //           |ADC_SC3_AVGS(1);
     //ADC0_SC1A|=ADC_SC1_ADCH(5);
     while(1)
      {
          while((ADC0_SC1A&ADC_SC1_COCO_MASK)!=ADC_SC1_COCO_MASK)
           {}
          value=ADC0_RA;
          result=value*3300/4096;
      }
 }


#include "all.h"
#include "math.h"
uint8 key1,key2;
char i=50;
uint8 flag_uart=0,flag_time=0,flag_key=0;
uint16 value;
uint32 t=0,times=0;
uint8 data[8];

    int main()
{
    SYS_CLOCK_SET(SYS_CLOCK_150M, 1, 2, 3, 6);
    motor_PWM_init(50,0.032);
    PORT_Enable_ALL();
    GPIO_INIT(PORTC,0,INPUT);
    GPIO_INIT(PORTC,1,INPUT);
    LCD_Init();
    //*************************************
    //PIT0
    PIT_CLOCK_Enable
    //PIT_INIT(PIT0,150000000,DEBUG_STOP);
    PIT_INIT(PIT0,600000,DEBUG_STOP);//4.5ms
    PIT_Enable(PIT0);
    
    
    ADC_Enable(ADC0);
    ADCINIT_A(ADC0,channal_b,AD5,bite_12);
    ADCHardWare_INIT(ADC0,Alternate_Trigger,Pre_A,PIT0_Trigger);
    ADCHardWare_configure(ADC0,Trigger_always,Sample_16);
    //ADC_channal(ADC0,AD5);
    
    //ADC_init_fly();
    //***************************************
    EnableInterrupts
    while(1)
    {
      //ADC_power_fly(&POWER_reslut);
        while((ADC0_SC1A&ADC_SC1_COCO_MASK)!=ADC_SC1_COCO_MASK)
      {}
      ADC_VALUE_A(ADC0,&value);
      POWER_reslut=(value*3300/4096)*133/33;
      display_DMP(10,0,(int32)(((float)POWER_reslut)/10));
      LCD_8x16char(15,0,'V');

    }
}


